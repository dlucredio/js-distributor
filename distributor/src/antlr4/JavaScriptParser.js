// Generated from src/antlr4/JavaScriptParser.g4 by ANTLR 4.13.0
// jshint ignore: start
import antlr4 from 'antlr4';
import JavaScriptParserListener from './JavaScriptParserListener.js';
import JavaScriptParserVisitor from './JavaScriptParserVisitor.js';

import JavaScriptParserBase from './JavaScriptParserBase.js';

const serializedATN = [4,1,128,1080,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,1,0,3,0,166,8,0,1,0,3,0,169,8,0,1,
0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
2,1,2,1,2,1,2,1,2,1,2,3,2,195,8,2,1,3,1,3,3,3,199,8,3,1,3,1,3,1,4,4,4,204,
8,4,11,4,12,4,205,1,5,1,5,1,5,1,6,3,6,212,8,6,1,6,1,6,3,6,216,8,6,1,6,1,
6,1,6,1,6,1,6,3,6,223,8,6,1,7,1,7,1,7,1,7,5,7,229,8,7,10,7,12,7,232,9,7,
1,7,1,7,3,7,236,8,7,3,7,238,8,7,1,7,1,7,1,8,1,8,1,8,3,8,245,8,8,1,9,1,9,
3,9,249,8,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,3,12,258,8,12,1,12,1,12,3,
12,262,8,12,1,13,1,13,1,13,1,14,1,14,1,14,3,14,270,8,14,1,15,1,15,3,15,274,
8,15,1,15,1,15,3,15,278,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,287,
8,15,1,16,1,16,1,16,1,16,1,16,1,16,3,16,295,8,16,1,16,1,16,3,16,299,8,16,
1,17,1,17,1,17,1,17,5,17,305,8,17,10,17,12,17,308,9,17,1,17,1,17,3,17,312,
8,17,3,17,314,8,17,1,17,1,17,1,18,1,18,1,18,3,18,321,8,18,1,19,1,19,1,19,
3,19,326,8,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,5,21,335,8,21,10,21,12,
21,338,9,21,1,22,1,22,1,22,3,22,343,8,22,1,23,1,23,1,24,1,24,1,24,1,24,1,
25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,358,8,25,1,26,1,26,1,26,1,26,1,26,
1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,378,
8,26,1,26,1,26,3,26,382,8,26,1,26,1,26,3,26,386,8,26,1,26,1,26,1,26,1,26,
1,26,1,26,3,26,394,8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,403,8,26,
1,26,1,26,1,26,3,26,408,8,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,416,8,26,
1,27,1,27,1,27,3,27,421,8,27,1,28,1,28,1,28,3,28,426,8,28,1,28,1,28,1,29,
1,29,1,29,3,29,433,8,29,1,29,1,29,1,30,1,30,1,30,3,30,440,8,30,1,30,1,30,
1,31,1,31,1,31,3,31,447,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,
1,33,1,33,1,33,1,33,1,33,1,34,1,34,3,34,465,8,34,1,34,1,34,3,34,469,8,34,
3,34,471,8,34,1,34,1,34,1,35,4,35,476,8,35,11,35,12,35,477,1,36,1,36,1,36,
1,36,3,36,484,8,36,1,37,1,37,1,37,3,37,489,8,37,1,38,1,38,1,38,1,38,1,39,
1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,3,40,504,8,40,1,40,3,40,507,8,40,
1,41,1,41,1,41,3,41,512,8,41,1,41,3,41,515,8,41,1,41,1,41,1,42,1,42,1,42,
1,43,1,43,1,43,1,44,3,44,526,8,44,1,44,1,44,3,44,530,8,44,1,44,1,44,1,44,
3,44,535,8,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,3,46,546,8,46,
1,46,1,46,5,46,550,8,46,10,46,12,46,553,9,46,1,46,1,46,1,47,1,47,1,47,1,
47,5,47,561,8,47,10,47,12,47,564,9,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,
572,8,47,1,47,1,47,3,47,576,8,47,1,47,1,47,1,47,1,47,3,47,582,8,47,1,48,
3,48,585,8,48,1,48,3,48,588,8,48,1,48,1,48,1,48,3,48,593,8,48,1,48,1,48,
1,48,1,48,3,48,599,8,48,1,48,3,48,602,8,48,1,48,1,48,1,48,1,48,1,48,1,48,
3,48,610,8,48,1,48,3,48,613,8,48,1,48,1,48,1,48,3,48,618,8,48,1,48,1,48,
1,48,3,48,623,8,48,1,49,1,49,1,49,5,49,628,8,49,10,49,12,49,631,9,49,1,49,
1,49,3,49,635,8,49,1,49,3,49,638,8,49,1,50,1,50,1,50,3,50,643,8,50,1,51,
1,51,1,51,1,52,1,52,3,52,650,8,52,1,52,1,52,1,53,4,53,655,8,53,11,53,12,
53,656,1,54,1,54,1,54,1,54,1,55,5,55,664,8,55,10,55,12,55,667,9,55,1,55,
3,55,670,8,55,1,55,4,55,673,8,55,11,55,12,55,674,1,55,5,55,678,8,55,10,55,
12,55,681,9,55,1,55,5,55,684,8,55,10,55,12,55,687,9,55,1,56,3,56,690,8,56,
1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,705,
8,57,1,57,3,57,708,8,57,1,57,1,57,1,57,3,57,713,8,57,1,57,1,57,1,57,1,57,
1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,730,8,57,1,57,
3,57,733,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,742,8,58,1,59,1,59,
1,59,1,59,5,59,748,8,59,10,59,12,59,751,9,59,1,59,3,59,754,8,59,3,59,756,
8,59,1,59,1,59,1,60,3,60,761,8,60,1,60,1,60,3,60,765,8,60,1,61,1,61,1,61,
5,61,770,8,61,10,61,12,61,773,9,61,1,62,1,62,1,62,1,62,3,62,779,8,62,1,62,
1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
62,1,62,3,62,827,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,889,8,62,1,62,1,62,1,62,1,62,1,62,
1,62,3,62,897,8,62,1,62,1,62,3,62,901,8,62,1,62,1,62,1,62,1,62,1,62,1,62,
1,62,1,62,1,62,1,62,1,62,5,62,914,8,62,10,62,12,62,917,9,62,1,63,1,63,1,
63,3,63,922,8,63,1,64,1,64,1,64,1,64,5,64,928,8,64,10,64,12,64,931,9,64,
1,64,3,64,934,8,64,3,64,936,8,64,1,64,1,64,1,65,3,65,941,8,65,1,65,1,65,
3,65,945,8,65,1,65,1,65,3,65,949,8,65,1,65,1,65,1,65,3,65,954,8,65,1,65,
1,65,1,65,1,65,3,65,960,8,65,1,66,1,66,1,66,3,66,965,8,66,1,66,3,66,968,
8,66,1,67,1,67,3,67,972,8,67,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
3,69,983,8,69,1,70,1,70,5,70,987,8,70,10,70,12,70,990,9,70,1,70,1,70,1,71,
1,71,1,71,1,71,1,71,3,71,999,8,71,1,72,1,72,1,73,1,73,1,74,1,74,1,74,1,74,
1,75,1,75,1,75,1,75,1,76,1,76,3,76,1015,8,76,1,77,1,77,1,78,1,78,1,78,3,
78,1022,8,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,
79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
1,79,1,79,1,79,1,79,1,79,3,79,1070,8,79,1,80,1,80,1,81,1,81,1,81,1,81,3,
81,1078,8,81,1,81,0,1,124,82,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
158,160,162,0,11,2,0,108,109,119,119,1,0,26,28,1,0,22,23,1,0,32,34,1,0,35,
38,1,0,39,42,1,0,48,59,1,0,63,67,1,0,68,71,4,0,98,99,107,107,112,112,119,
119,1,0,111,112,1247,0,165,1,0,0,0,2,172,1,0,0,0,4,194,1,0,0,0,6,196,1,0,
0,0,8,203,1,0,0,0,10,207,1,0,0,0,12,222,1,0,0,0,14,224,1,0,0,0,16,241,1,
0,0,0,18,248,1,0,0,0,20,250,1,0,0,0,22,252,1,0,0,0,24,257,1,0,0,0,26,263,
1,0,0,0,28,266,1,0,0,0,30,286,1,0,0,0,32,298,1,0,0,0,34,300,1,0,0,0,36,317,
1,0,0,0,38,325,1,0,0,0,40,327,1,0,0,0,42,330,1,0,0,0,44,339,1,0,0,0,46,344,
1,0,0,0,48,346,1,0,0,0,50,350,1,0,0,0,52,415,1,0,0,0,54,420,1,0,0,0,56,422,
1,0,0,0,58,429,1,0,0,0,60,436,1,0,0,0,62,443,1,0,0,0,64,450,1,0,0,0,66,456,
1,0,0,0,68,462,1,0,0,0,70,475,1,0,0,0,72,479,1,0,0,0,74,485,1,0,0,0,76,490,
1,0,0,0,78,494,1,0,0,0,80,499,1,0,0,0,82,508,1,0,0,0,84,518,1,0,0,0,86,521,
1,0,0,0,88,525,1,0,0,0,90,539,1,0,0,0,92,545,1,0,0,0,94,581,1,0,0,0,96,622,
1,0,0,0,98,637,1,0,0,0,100,639,1,0,0,0,102,644,1,0,0,0,104,647,1,0,0,0,106,
654,1,0,0,0,108,658,1,0,0,0,110,665,1,0,0,0,112,689,1,0,0,0,114,732,1,0,
0,0,116,741,1,0,0,0,118,743,1,0,0,0,120,760,1,0,0,0,122,766,1,0,0,0,124,
826,1,0,0,0,126,921,1,0,0,0,128,923,1,0,0,0,130,959,1,0,0,0,132,967,1,0,
0,0,134,971,1,0,0,0,136,973,1,0,0,0,138,982,1,0,0,0,140,984,1,0,0,0,142,
998,1,0,0,0,144,1000,1,0,0,0,146,1002,1,0,0,0,148,1004,1,0,0,0,150,1008,
1,0,0,0,152,1014,1,0,0,0,154,1016,1,0,0,0,156,1021,1,0,0,0,158,1069,1,0,
0,0,160,1071,1,0,0,0,162,1077,1,0,0,0,164,166,5,1,0,0,165,164,1,0,0,0,165,
166,1,0,0,0,166,168,1,0,0,0,167,169,3,106,53,0,168,167,1,0,0,0,168,169,1,
0,0,0,169,170,1,0,0,0,170,171,5,0,0,1,171,1,1,0,0,0,172,173,3,4,2,0,173,
3,1,0,0,0,174,195,3,6,3,0,175,195,3,40,20,0,176,195,3,10,5,0,177,195,3,30,
15,0,178,195,3,46,23,0,179,195,3,90,45,0,180,195,3,88,44,0,181,195,3,48,
24,0,182,195,3,50,25,0,183,195,3,52,26,0,184,195,3,56,28,0,185,195,3,58,
29,0,186,195,3,60,30,0,187,195,3,62,31,0,188,195,3,64,32,0,189,195,3,76,
38,0,190,195,3,66,33,0,191,195,3,78,39,0,192,195,3,80,40,0,193,195,3,86,
43,0,194,174,1,0,0,0,194,175,1,0,0,0,194,176,1,0,0,0,194,177,1,0,0,0,194,
178,1,0,0,0,194,179,1,0,0,0,194,180,1,0,0,0,194,181,1,0,0,0,194,182,1,0,
0,0,194,183,1,0,0,0,194,184,1,0,0,0,194,185,1,0,0,0,194,186,1,0,0,0,194,
187,1,0,0,0,194,188,1,0,0,0,194,189,1,0,0,0,194,190,1,0,0,0,194,191,1,0,
0,0,194,192,1,0,0,0,194,193,1,0,0,0,195,5,1,0,0,0,196,198,5,9,0,0,197,199,
3,8,4,0,198,197,1,0,0,0,198,199,1,0,0,0,199,200,1,0,0,0,200,201,5,11,0,0,
201,7,1,0,0,0,202,204,3,4,2,0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,1,
0,0,0,205,206,1,0,0,0,206,9,1,0,0,0,207,208,5,106,0,0,208,209,3,12,6,0,209,
11,1,0,0,0,210,212,3,22,11,0,211,210,1,0,0,0,211,212,1,0,0,0,212,215,1,0,
0,0,213,216,3,24,12,0,214,216,3,14,7,0,215,213,1,0,0,0,215,214,1,0,0,0,216,
217,1,0,0,0,217,218,3,26,13,0,218,219,3,162,81,0,219,223,1,0,0,0,220,221,
5,120,0,0,221,223,3,162,81,0,222,211,1,0,0,0,222,220,1,0,0,0,223,13,1,0,
0,0,224,230,5,9,0,0,225,226,3,16,8,0,226,227,5,13,0,0,227,229,1,0,0,0,228,
225,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,237,1,0,
0,0,232,230,1,0,0,0,233,235,3,16,8,0,234,236,5,13,0,0,235,234,1,0,0,0,235,
236,1,0,0,0,236,238,1,0,0,0,237,233,1,0,0,0,237,238,1,0,0,0,238,239,1,0,
0,0,239,240,5,11,0,0,240,15,1,0,0,0,241,244,3,18,9,0,242,243,5,98,0,0,243,
245,3,20,10,0,244,242,1,0,0,0,244,245,1,0,0,0,245,17,1,0,0,0,246,249,3,152,
76,0,247,249,5,120,0,0,248,246,1,0,0,0,248,247,1,0,0,0,249,19,1,0,0,0,250,
251,7,0,0,0,251,21,1,0,0,0,252,253,3,28,14,0,253,254,5,13,0,0,254,23,1,0,
0,0,255,258,5,26,0,0,256,258,3,152,76,0,257,255,1,0,0,0,257,256,1,0,0,0,
258,261,1,0,0,0,259,260,5,98,0,0,260,262,3,152,76,0,261,259,1,0,0,0,261,
262,1,0,0,0,262,25,1,0,0,0,263,264,5,99,0,0,264,265,5,120,0,0,265,27,1,0,
0,0,266,269,3,152,76,0,267,268,5,98,0,0,268,270,3,152,76,0,269,267,1,0,0,
0,269,270,1,0,0,0,270,29,1,0,0,0,271,273,5,105,0,0,272,274,5,92,0,0,273,
272,1,0,0,0,273,274,1,0,0,0,274,277,1,0,0,0,275,278,3,32,16,0,276,278,3,
38,19,0,277,275,1,0,0,0,277,276,1,0,0,0,278,279,1,0,0,0,279,280,3,162,81,
0,280,287,1,0,0,0,281,282,5,105,0,0,282,283,5,92,0,0,283,284,3,124,62,0,
284,285,3,162,81,0,285,287,1,0,0,0,286,271,1,0,0,0,286,281,1,0,0,0,287,31,
1,0,0,0,288,289,3,24,12,0,289,290,3,26,13,0,290,291,3,162,81,0,291,299,1,
0,0,0,292,294,3,34,17,0,293,295,3,26,13,0,294,293,1,0,0,0,294,295,1,0,0,
0,295,296,1,0,0,0,296,297,3,162,81,0,297,299,1,0,0,0,298,288,1,0,0,0,298,
292,1,0,0,0,299,33,1,0,0,0,300,306,5,9,0,0,301,302,3,36,18,0,302,303,5,13,
0,0,303,305,1,0,0,0,304,301,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,
307,1,0,0,0,307,313,1,0,0,0,308,306,1,0,0,0,309,311,3,36,18,0,310,312,5,
13,0,0,311,310,1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,309,1,0,0,0,313,
314,1,0,0,0,314,315,1,0,0,0,315,316,5,11,0,0,316,35,1,0,0,0,317,320,3,18,
9,0,318,319,5,98,0,0,319,321,3,18,9,0,320,318,1,0,0,0,320,321,1,0,0,0,321,
37,1,0,0,0,322,326,3,40,20,0,323,326,3,90,45,0,324,326,3,88,44,0,325,322,
1,0,0,0,325,323,1,0,0,0,325,324,1,0,0,0,326,39,1,0,0,0,327,328,3,42,21,0,
328,329,3,162,81,0,329,41,1,0,0,0,330,331,3,54,27,0,331,336,3,44,22,0,332,
333,5,13,0,0,333,335,3,44,22,0,334,332,1,0,0,0,335,338,1,0,0,0,336,334,1,
0,0,0,336,337,1,0,0,0,337,43,1,0,0,0,338,336,1,0,0,0,339,342,3,126,63,0,
340,341,5,14,0,0,341,343,3,124,62,0,342,340,1,0,0,0,342,343,1,0,0,0,343,
45,1,0,0,0,344,345,5,12,0,0,345,47,1,0,0,0,346,347,4,24,0,0,347,348,3,122,
61,0,348,349,3,162,81,0,349,49,1,0,0,0,350,351,5,93,0,0,351,352,5,7,0,0,
352,353,3,122,61,0,353,354,5,8,0,0,354,357,3,4,2,0,355,356,5,77,0,0,356,
358,3,4,2,0,357,355,1,0,0,0,357,358,1,0,0,0,358,51,1,0,0,0,359,360,5,73,
0,0,360,361,3,4,2,0,361,362,5,87,0,0,362,363,5,7,0,0,363,364,3,122,61,0,
364,365,5,8,0,0,365,366,3,162,81,0,366,416,1,0,0,0,367,368,5,87,0,0,368,
369,5,7,0,0,369,370,3,122,61,0,370,371,5,8,0,0,371,372,3,4,2,0,372,416,1,
0,0,0,373,374,5,85,0,0,374,377,5,7,0,0,375,378,3,122,61,0,376,378,3,42,21,
0,377,375,1,0,0,0,377,376,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,381,
5,12,0,0,380,382,3,122,61,0,381,380,1,0,0,0,381,382,1,0,0,0,382,383,1,0,
0,0,383,385,5,12,0,0,384,386,3,122,61,0,385,384,1,0,0,0,385,386,1,0,0,0,
386,387,1,0,0,0,387,388,5,8,0,0,388,416,3,4,2,0,389,390,5,85,0,0,390,393,
5,7,0,0,391,394,3,124,62,0,392,394,3,42,21,0,393,391,1,0,0,0,393,392,1,0,
0,0,394,395,1,0,0,0,395,396,5,96,0,0,396,397,3,122,61,0,397,398,5,8,0,0,
398,399,3,4,2,0,399,416,1,0,0,0,400,402,5,85,0,0,401,403,5,108,0,0,402,401,
1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,0,404,407,5,7,0,0,405,408,3,124,62,
0,406,408,3,42,21,0,407,405,1,0,0,0,407,406,1,0,0,0,408,409,1,0,0,0,409,
410,3,154,77,0,410,411,4,26,1,0,411,412,3,122,61,0,412,413,5,8,0,0,413,414,
3,4,2,0,414,416,1,0,0,0,415,359,1,0,0,0,415,367,1,0,0,0,415,373,1,0,0,0,
415,389,1,0,0,0,415,400,1,0,0,0,416,53,1,0,0,0,417,421,5,79,0,0,418,421,
3,160,80,0,419,421,5,104,0,0,420,417,1,0,0,0,420,418,1,0,0,0,420,419,1,0,
0,0,421,55,1,0,0,0,422,425,5,84,0,0,423,424,4,28,2,0,424,426,3,154,77,0,
425,423,1,0,0,0,425,426,1,0,0,0,426,427,1,0,0,0,427,428,3,162,81,0,428,57,
1,0,0,0,429,432,5,72,0,0,430,431,4,29,3,0,431,433,3,154,77,0,432,430,1,0,
0,0,432,433,1,0,0,0,433,434,1,0,0,0,434,435,3,162,81,0,435,59,1,0,0,0,436,
439,5,82,0,0,437,438,4,30,4,0,438,440,3,122,61,0,439,437,1,0,0,0,439,440,
1,0,0,0,440,441,1,0,0,0,441,442,3,162,81,0,442,61,1,0,0,0,443,446,5,109,
0,0,444,445,4,31,5,0,445,447,3,122,61,0,446,444,1,0,0,0,446,447,1,0,0,0,
447,448,1,0,0,0,448,449,3,162,81,0,449,63,1,0,0,0,450,451,5,91,0,0,451,452,
5,7,0,0,452,453,3,122,61,0,453,454,5,8,0,0,454,455,3,4,2,0,455,65,1,0,0,
0,456,457,5,86,0,0,457,458,5,7,0,0,458,459,3,122,61,0,459,460,5,8,0,0,460,
461,3,68,34,0,461,67,1,0,0,0,462,464,5,9,0,0,463,465,3,70,35,0,464,463,1,
0,0,0,464,465,1,0,0,0,465,470,1,0,0,0,466,468,3,74,37,0,467,469,3,70,35,
0,468,467,1,0,0,0,468,469,1,0,0,0,469,471,1,0,0,0,470,466,1,0,0,0,470,471,
1,0,0,0,471,472,1,0,0,0,472,473,5,11,0,0,473,69,1,0,0,0,474,476,3,72,36,
0,475,474,1,0,0,0,476,477,1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,478,71,
1,0,0,0,479,480,5,76,0,0,480,481,3,122,61,0,481,483,5,17,0,0,482,484,3,8,
4,0,483,482,1,0,0,0,483,484,1,0,0,0,484,73,1,0,0,0,485,486,5,92,0,0,486,
488,5,17,0,0,487,489,3,8,4,0,488,487,1,0,0,0,488,489,1,0,0,0,489,75,1,0,
0,0,490,491,3,154,77,0,491,492,5,17,0,0,492,493,3,4,2,0,493,77,1,0,0,0,494,
495,5,94,0,0,495,496,4,39,6,0,496,497,3,122,61,0,497,498,3,162,81,0,498,
79,1,0,0,0,499,500,5,97,0,0,500,506,3,6,3,0,501,503,3,82,41,0,502,504,3,
84,42,0,503,502,1,0,0,0,503,504,1,0,0,0,504,507,1,0,0,0,505,507,3,84,42,
0,506,501,1,0,0,0,506,505,1,0,0,0,507,81,1,0,0,0,508,514,5,80,0,0,509,511,
5,7,0,0,510,512,3,126,63,0,511,510,1,0,0,0,511,512,1,0,0,0,512,513,1,0,0,
0,513,515,5,8,0,0,514,509,1,0,0,0,514,515,1,0,0,0,515,516,1,0,0,0,516,517,
3,6,3,0,517,83,1,0,0,0,518,519,5,81,0,0,519,520,3,6,3,0,520,85,1,0,0,0,521,
522,5,88,0,0,522,523,3,162,81,0,523,87,1,0,0,0,524,526,5,107,0,0,525,524,
1,0,0,0,525,526,1,0,0,0,526,527,1,0,0,0,527,529,5,89,0,0,528,530,5,26,0,
0,529,528,1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,0,531,532,3,154,77,0,532,
534,5,7,0,0,533,535,3,98,49,0,534,533,1,0,0,0,534,535,1,0,0,0,535,536,1,
0,0,0,536,537,5,8,0,0,537,538,3,104,52,0,538,89,1,0,0,0,539,540,5,100,0,
0,540,541,3,154,77,0,541,542,3,92,46,0,542,91,1,0,0,0,543,544,5,102,0,0,
544,546,3,124,62,0,545,543,1,0,0,0,545,546,1,0,0,0,546,547,1,0,0,0,547,551,
5,9,0,0,548,550,3,94,47,0,549,548,1,0,0,0,550,553,1,0,0,0,551,549,1,0,0,
0,551,552,1,0,0,0,552,554,1,0,0,0,553,551,1,0,0,0,554,555,5,11,0,0,555,93,
1,0,0,0,556,561,5,118,0,0,557,558,4,47,7,0,558,561,3,154,77,0,559,561,5,
107,0,0,560,556,1,0,0,0,560,557,1,0,0,0,560,559,1,0,0,0,561,564,1,0,0,0,
562,560,1,0,0,0,562,563,1,0,0,0,563,571,1,0,0,0,564,562,1,0,0,0,565,572,
3,96,48,0,566,567,3,126,63,0,567,568,5,14,0,0,568,569,3,128,64,0,569,570,
5,12,0,0,570,572,1,0,0,0,571,565,1,0,0,0,571,566,1,0,0,0,572,582,1,0,0,0,
573,582,3,46,23,0,574,576,5,31,0,0,575,574,1,0,0,0,575,576,1,0,0,0,576,577,
1,0,0,0,577,578,3,116,58,0,578,579,5,14,0,0,579,580,3,124,62,0,580,582,1,
0,0,0,581,562,1,0,0,0,581,573,1,0,0,0,581,575,1,0,0,0,582,95,1,0,0,0,583,
585,5,26,0,0,584,583,1,0,0,0,584,585,1,0,0,0,585,587,1,0,0,0,586,588,5,31,
0,0,587,586,1,0,0,0,587,588,1,0,0,0,588,589,1,0,0,0,589,590,3,116,58,0,590,
592,5,7,0,0,591,593,3,98,49,0,592,591,1,0,0,0,592,593,1,0,0,0,593,594,1,
0,0,0,594,595,5,8,0,0,595,596,3,104,52,0,596,623,1,0,0,0,597,599,5,26,0,
0,598,597,1,0,0,0,598,599,1,0,0,0,599,601,1,0,0,0,600,602,5,31,0,0,601,600,
1,0,0,0,601,602,1,0,0,0,602,603,1,0,0,0,603,604,3,148,74,0,604,605,5,7,0,
0,605,606,5,8,0,0,606,607,3,104,52,0,607,623,1,0,0,0,608,610,5,26,0,0,609,
608,1,0,0,0,609,610,1,0,0,0,610,612,1,0,0,0,611,613,5,31,0,0,612,611,1,0,
0,0,612,613,1,0,0,0,613,614,1,0,0,0,614,615,3,150,75,0,615,617,5,7,0,0,616,
618,3,98,49,0,617,616,1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,0,619,620,5,
8,0,0,620,621,3,104,52,0,621,623,1,0,0,0,622,584,1,0,0,0,622,598,1,0,0,0,
622,609,1,0,0,0,623,97,1,0,0,0,624,629,3,100,50,0,625,626,5,13,0,0,626,628,
3,100,50,0,627,625,1,0,0,0,628,631,1,0,0,0,629,627,1,0,0,0,629,630,1,0,0,
0,630,634,1,0,0,0,631,629,1,0,0,0,632,633,5,13,0,0,633,635,3,102,51,0,634,
632,1,0,0,0,634,635,1,0,0,0,635,638,1,0,0,0,636,638,3,102,51,0,637,624,1,
0,0,0,637,636,1,0,0,0,638,99,1,0,0,0,639,642,3,126,63,0,640,641,5,14,0,0,
641,643,3,124,62,0,642,640,1,0,0,0,642,643,1,0,0,0,643,101,1,0,0,0,644,645,
5,18,0,0,645,646,3,124,62,0,646,103,1,0,0,0,647,649,5,9,0,0,648,650,3,106,
53,0,649,648,1,0,0,0,649,650,1,0,0,0,650,651,1,0,0,0,651,652,5,11,0,0,652,
105,1,0,0,0,653,655,3,2,1,0,654,653,1,0,0,0,655,656,1,0,0,0,656,654,1,0,
0,0,656,657,1,0,0,0,657,107,1,0,0,0,658,659,5,5,0,0,659,660,3,110,55,0,660,
661,5,6,0,0,661,109,1,0,0,0,662,664,5,13,0,0,663,662,1,0,0,0,664,667,1,0,
0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,669,1,0,0,0,667,665,1,0,0,0,668,
670,3,112,56,0,669,668,1,0,0,0,669,670,1,0,0,0,670,679,1,0,0,0,671,673,5,
13,0,0,672,671,1,0,0,0,673,674,1,0,0,0,674,672,1,0,0,0,674,675,1,0,0,0,675,
676,1,0,0,0,676,678,3,112,56,0,677,672,1,0,0,0,678,681,1,0,0,0,679,677,1,
0,0,0,679,680,1,0,0,0,680,685,1,0,0,0,681,679,1,0,0,0,682,684,5,13,0,0,683,
682,1,0,0,0,684,687,1,0,0,0,685,683,1,0,0,0,685,686,1,0,0,0,686,111,1,0,
0,0,687,685,1,0,0,0,688,690,5,18,0,0,689,688,1,0,0,0,689,690,1,0,0,0,690,
691,1,0,0,0,691,692,3,124,62,0,692,113,1,0,0,0,693,694,3,116,58,0,694,695,
5,17,0,0,695,696,3,124,62,0,696,733,1,0,0,0,697,698,5,5,0,0,698,699,3,124,
62,0,699,700,5,6,0,0,700,701,5,17,0,0,701,702,3,124,62,0,702,733,1,0,0,0,
703,705,5,107,0,0,704,703,1,0,0,0,704,705,1,0,0,0,705,707,1,0,0,0,706,708,
5,26,0,0,707,706,1,0,0,0,707,708,1,0,0,0,708,709,1,0,0,0,709,710,3,116,58,
0,710,712,5,7,0,0,711,713,3,98,49,0,712,711,1,0,0,0,712,713,1,0,0,0,713,
714,1,0,0,0,714,715,5,8,0,0,715,716,3,104,52,0,716,733,1,0,0,0,717,718,3,
148,74,0,718,719,5,7,0,0,719,720,5,8,0,0,720,721,3,104,52,0,721,733,1,0,
0,0,722,723,3,150,75,0,723,724,5,7,0,0,724,725,3,100,50,0,725,726,5,8,0,
0,726,727,3,104,52,0,727,733,1,0,0,0,728,730,5,18,0,0,729,728,1,0,0,0,729,
730,1,0,0,0,730,731,1,0,0,0,731,733,3,124,62,0,732,693,1,0,0,0,732,697,1,
0,0,0,732,704,1,0,0,0,732,717,1,0,0,0,732,722,1,0,0,0,732,729,1,0,0,0,733,
115,1,0,0,0,734,742,3,152,76,0,735,742,5,120,0,0,736,742,3,144,72,0,737,
738,5,5,0,0,738,739,3,124,62,0,739,740,5,6,0,0,740,742,1,0,0,0,741,734,1,
0,0,0,741,735,1,0,0,0,741,736,1,0,0,0,741,737,1,0,0,0,742,117,1,0,0,0,743,
755,5,7,0,0,744,749,3,120,60,0,745,746,5,13,0,0,746,748,3,120,60,0,747,745,
1,0,0,0,748,751,1,0,0,0,749,747,1,0,0,0,749,750,1,0,0,0,750,753,1,0,0,0,
751,749,1,0,0,0,752,754,5,13,0,0,753,752,1,0,0,0,753,754,1,0,0,0,754,756,
1,0,0,0,755,744,1,0,0,0,755,756,1,0,0,0,756,757,1,0,0,0,757,758,5,8,0,0,
758,119,1,0,0,0,759,761,5,18,0,0,760,759,1,0,0,0,760,761,1,0,0,0,761,764,
1,0,0,0,762,765,3,124,62,0,763,765,3,154,77,0,764,762,1,0,0,0,764,763,1,
0,0,0,765,121,1,0,0,0,766,771,3,124,62,0,767,768,5,13,0,0,768,770,3,124,
62,0,769,767,1,0,0,0,770,773,1,0,0,0,771,769,1,0,0,0,771,772,1,0,0,0,772,
123,1,0,0,0,773,771,1,0,0,0,774,775,6,62,-1,0,775,827,3,130,65,0,776,778,
5,100,0,0,777,779,3,154,77,0,778,777,1,0,0,0,778,779,1,0,0,0,779,780,1,0,
0,0,780,827,3,92,46,0,781,782,5,78,0,0,782,783,3,124,62,0,783,784,3,118,
59,0,784,827,1,0,0,0,785,786,5,78,0,0,786,827,3,124,62,42,787,788,5,78,0,
0,788,789,5,19,0,0,789,827,3,154,77,0,790,791,5,95,0,0,791,827,3,124,62,
37,792,793,5,83,0,0,793,827,3,124,62,36,794,795,5,75,0,0,795,827,3,124,62,
35,796,797,5,20,0,0,797,827,3,124,62,34,798,799,5,21,0,0,799,827,3,124,62,
33,800,801,5,22,0,0,801,827,3,124,62,32,802,803,5,23,0,0,803,827,3,124,62,
31,804,805,5,24,0,0,805,827,3,124,62,30,806,807,5,25,0,0,807,827,3,124,62,
29,808,809,5,108,0,0,809,827,3,124,62,28,810,811,5,106,0,0,811,812,5,7,0,
0,812,813,3,124,62,0,813,814,5,8,0,0,814,827,1,0,0,0,815,827,3,62,31,0,816,
827,5,90,0,0,817,827,3,154,77,0,818,827,5,103,0,0,819,827,3,138,69,0,820,
827,3,108,54,0,821,827,3,128,64,0,822,823,5,7,0,0,823,824,3,122,61,0,824,
825,5,8,0,0,825,827,1,0,0,0,826,774,1,0,0,0,826,776,1,0,0,0,826,781,1,0,
0,0,826,785,1,0,0,0,826,787,1,0,0,0,826,790,1,0,0,0,826,792,1,0,0,0,826,
794,1,0,0,0,826,796,1,0,0,0,826,798,1,0,0,0,826,800,1,0,0,0,826,802,1,0,
0,0,826,804,1,0,0,0,826,806,1,0,0,0,826,808,1,0,0,0,826,810,1,0,0,0,826,
815,1,0,0,0,826,816,1,0,0,0,826,817,1,0,0,0,826,818,1,0,0,0,826,819,1,0,
0,0,826,820,1,0,0,0,826,821,1,0,0,0,826,822,1,0,0,0,827,915,1,0,0,0,828,
829,10,46,0,0,829,830,5,16,0,0,830,914,3,124,62,47,831,832,10,27,0,0,832,
833,5,29,0,0,833,914,3,124,62,27,834,835,10,26,0,0,835,836,7,1,0,0,836,914,
3,124,62,27,837,838,10,25,0,0,838,839,7,2,0,0,839,914,3,124,62,26,840,841,
10,24,0,0,841,842,5,30,0,0,842,914,3,124,62,25,843,844,10,23,0,0,844,845,
7,3,0,0,845,914,3,124,62,24,846,847,10,22,0,0,847,848,7,4,0,0,848,914,3,
124,62,23,849,850,10,21,0,0,850,851,5,74,0,0,851,914,3,124,62,22,852,853,
10,20,0,0,853,854,5,96,0,0,854,914,3,124,62,21,855,856,10,19,0,0,856,857,
7,5,0,0,857,914,3,124,62,20,858,859,10,18,0,0,859,860,5,43,0,0,860,914,3,
124,62,19,861,862,10,17,0,0,862,863,5,44,0,0,863,914,3,124,62,18,864,865,
10,16,0,0,865,866,5,45,0,0,866,914,3,124,62,17,867,868,10,15,0,0,868,869,
5,46,0,0,869,914,3,124,62,16,870,871,10,14,0,0,871,872,5,47,0,0,872,914,
3,124,62,15,873,874,10,13,0,0,874,875,5,15,0,0,875,876,3,124,62,0,876,877,
5,17,0,0,877,878,3,124,62,14,878,914,1,0,0,0,879,880,10,12,0,0,880,881,5,
14,0,0,881,914,3,124,62,12,882,883,10,11,0,0,883,884,3,136,68,0,884,885,
3,124,62,11,885,914,1,0,0,0,886,888,10,45,0,0,887,889,5,16,0,0,888,887,1,
0,0,0,888,889,1,0,0,0,889,890,1,0,0,0,890,891,5,5,0,0,891,892,3,122,61,0,
892,893,5,6,0,0,893,914,1,0,0,0,894,896,10,44,0,0,895,897,5,15,0,0,896,895,
1,0,0,0,896,897,1,0,0,0,897,898,1,0,0,0,898,900,5,19,0,0,899,901,5,31,0,
0,900,899,1,0,0,0,900,901,1,0,0,0,901,902,1,0,0,0,902,914,3,152,76,0,903,
904,10,41,0,0,904,914,3,118,59,0,905,906,10,39,0,0,906,907,4,62,30,0,907,
914,5,20,0,0,908,909,10,38,0,0,909,910,4,62,32,0,910,914,5,21,0,0,911,912,
10,9,0,0,912,914,3,140,70,0,913,828,1,0,0,0,913,831,1,0,0,0,913,834,1,0,
0,0,913,837,1,0,0,0,913,840,1,0,0,0,913,843,1,0,0,0,913,846,1,0,0,0,913,
849,1,0,0,0,913,852,1,0,0,0,913,855,1,0,0,0,913,858,1,0,0,0,913,861,1,0,
0,0,913,864,1,0,0,0,913,867,1,0,0,0,913,870,1,0,0,0,913,873,1,0,0,0,913,
879,1,0,0,0,913,882,1,0,0,0,913,886,1,0,0,0,913,894,1,0,0,0,913,903,1,0,
0,0,913,905,1,0,0,0,913,908,1,0,0,0,913,911,1,0,0,0,914,917,1,0,0,0,915,
913,1,0,0,0,915,916,1,0,0,0,916,125,1,0,0,0,917,915,1,0,0,0,918,922,3,154,
77,0,919,922,3,108,54,0,920,922,3,128,64,0,921,918,1,0,0,0,921,919,1,0,0,
0,921,920,1,0,0,0,922,127,1,0,0,0,923,935,5,9,0,0,924,929,3,114,57,0,925,
926,5,13,0,0,926,928,3,114,57,0,927,925,1,0,0,0,928,931,1,0,0,0,929,927,
1,0,0,0,929,930,1,0,0,0,930,933,1,0,0,0,931,929,1,0,0,0,932,934,5,13,0,0,
933,932,1,0,0,0,933,934,1,0,0,0,934,936,1,0,0,0,935,924,1,0,0,0,935,936,
1,0,0,0,936,937,1,0,0,0,937,938,5,11,0,0,938,129,1,0,0,0,939,941,5,107,0,
0,940,939,1,0,0,0,940,941,1,0,0,0,941,942,1,0,0,0,942,944,5,89,0,0,943,945,
5,26,0,0,944,943,1,0,0,0,944,945,1,0,0,0,945,946,1,0,0,0,946,948,5,7,0,0,
947,949,3,98,49,0,948,947,1,0,0,0,948,949,1,0,0,0,949,950,1,0,0,0,950,951,
5,8,0,0,951,960,3,104,52,0,952,954,5,107,0,0,953,952,1,0,0,0,953,954,1,0,
0,0,954,955,1,0,0,0,955,956,3,132,66,0,956,957,5,60,0,0,957,958,3,134,67,
0,958,960,1,0,0,0,959,940,1,0,0,0,959,953,1,0,0,0,960,131,1,0,0,0,961,968,
3,154,77,0,962,964,5,7,0,0,963,965,3,98,49,0,964,963,1,0,0,0,964,965,1,0,
0,0,965,966,1,0,0,0,966,968,5,8,0,0,967,961,1,0,0,0,967,962,1,0,0,0,968,
133,1,0,0,0,969,972,3,124,62,0,970,972,3,104,52,0,971,969,1,0,0,0,971,970,
1,0,0,0,972,135,1,0,0,0,973,974,7,6,0,0,974,137,1,0,0,0,975,983,5,61,0,0,
976,983,5,62,0,0,977,983,5,120,0,0,978,983,3,140,70,0,979,983,5,4,0,0,980,
983,3,144,72,0,981,983,3,146,73,0,982,975,1,0,0,0,982,976,1,0,0,0,982,977,
1,0,0,0,982,978,1,0,0,0,982,979,1,0,0,0,982,980,1,0,0,0,982,981,1,0,0,0,
983,139,1,0,0,0,984,988,5,121,0,0,985,987,3,142,71,0,986,985,1,0,0,0,987,
990,1,0,0,0,988,986,1,0,0,0,988,989,1,0,0,0,989,991,1,0,0,0,990,988,1,0,
0,0,991,992,5,121,0,0,992,141,1,0,0,0,993,999,5,128,0,0,994,995,5,127,0,
0,995,996,3,124,62,0,996,997,5,10,0,0,997,999,1,0,0,0,998,993,1,0,0,0,998,
994,1,0,0,0,999,143,1,0,0,0,1000,1001,7,7,0,0,1001,145,1,0,0,0,1002,1003,
7,8,0,0,1003,147,1,0,0,0,1004,1005,4,74,34,0,1005,1006,3,154,77,0,1006,1007,
3,116,58,0,1007,149,1,0,0,0,1008,1009,4,75,35,0,1009,1010,3,154,77,0,1010,
1011,3,116,58,0,1011,151,1,0,0,0,1012,1015,3,154,77,0,1013,1015,3,156,78,
0,1014,1012,1,0,0,0,1014,1013,1,0,0,0,1015,153,1,0,0,0,1016,1017,7,9,0,0,
1017,155,1,0,0,0,1018,1022,3,158,79,0,1019,1022,5,61,0,0,1020,1022,5,62,
0,0,1021,1018,1,0,0,0,1021,1019,1,0,0,0,1021,1020,1,0,0,0,1022,157,1,0,0,
0,1023,1070,5,72,0,0,1024,1070,5,73,0,0,1025,1070,5,74,0,0,1026,1070,5,75,
0,0,1027,1070,5,76,0,0,1028,1070,5,77,0,0,1029,1070,5,78,0,0,1030,1070,5,
79,0,0,1031,1070,5,80,0,0,1032,1070,5,81,0,0,1033,1070,5,82,0,0,1034,1070,
5,83,0,0,1035,1070,5,84,0,0,1036,1070,5,85,0,0,1037,1070,5,86,0,0,1038,1070,
5,87,0,0,1039,1070,5,88,0,0,1040,1070,5,89,0,0,1041,1070,5,90,0,0,1042,1070,
5,91,0,0,1043,1070,5,92,0,0,1044,1070,5,93,0,0,1045,1070,5,94,0,0,1046,1070,
5,95,0,0,1047,1070,5,96,0,0,1048,1070,5,97,0,0,1049,1070,5,100,0,0,1050,
1070,5,101,0,0,1051,1070,5,102,0,0,1052,1070,5,103,0,0,1053,1070,5,104,0,
0,1054,1070,5,105,0,0,1055,1070,5,106,0,0,1056,1070,5,110,0,0,1057,1070,
3,160,80,0,1058,1070,5,113,0,0,1059,1070,5,114,0,0,1060,1070,5,115,0,0,1061,
1070,5,116,0,0,1062,1070,5,117,0,0,1063,1070,5,118,0,0,1064,1070,5,109,0,
0,1065,1070,5,107,0,0,1066,1070,5,108,0,0,1067,1070,5,99,0,0,1068,1070,5,
98,0,0,1069,1023,1,0,0,0,1069,1024,1,0,0,0,1069,1025,1,0,0,0,1069,1026,1,
0,0,0,1069,1027,1,0,0,0,1069,1028,1,0,0,0,1069,1029,1,0,0,0,1069,1030,1,
0,0,0,1069,1031,1,0,0,0,1069,1032,1,0,0,0,1069,1033,1,0,0,0,1069,1034,1,
0,0,0,1069,1035,1,0,0,0,1069,1036,1,0,0,0,1069,1037,1,0,0,0,1069,1038,1,
0,0,0,1069,1039,1,0,0,0,1069,1040,1,0,0,0,1069,1041,1,0,0,0,1069,1042,1,
0,0,0,1069,1043,1,0,0,0,1069,1044,1,0,0,0,1069,1045,1,0,0,0,1069,1046,1,
0,0,0,1069,1047,1,0,0,0,1069,1048,1,0,0,0,1069,1049,1,0,0,0,1069,1050,1,
0,0,0,1069,1051,1,0,0,0,1069,1052,1,0,0,0,1069,1053,1,0,0,0,1069,1054,1,
0,0,0,1069,1055,1,0,0,0,1069,1056,1,0,0,0,1069,1057,1,0,0,0,1069,1058,1,
0,0,0,1069,1059,1,0,0,0,1069,1060,1,0,0,0,1069,1061,1,0,0,0,1069,1062,1,
0,0,0,1069,1063,1,0,0,0,1069,1064,1,0,0,0,1069,1065,1,0,0,0,1069,1066,1,
0,0,0,1069,1067,1,0,0,0,1069,1068,1,0,0,0,1070,159,1,0,0,0,1071,1072,7,10,
0,0,1072,161,1,0,0,0,1073,1078,5,12,0,0,1074,1078,5,0,0,1,1075,1078,4,81,
36,0,1076,1078,4,81,37,0,1077,1073,1,0,0,0,1077,1074,1,0,0,0,1077,1075,1,
0,0,0,1077,1076,1,0,0,0,1078,163,1,0,0,0,120,165,168,194,198,205,211,215,
222,230,235,237,244,248,257,261,269,273,277,286,294,298,306,311,313,320,
325,336,342,357,377,381,385,393,402,407,415,420,425,432,439,446,464,468,
470,477,483,488,503,506,511,514,525,529,534,545,551,560,562,571,575,581,
584,587,592,598,601,609,612,617,622,629,634,637,642,649,656,665,669,674,
679,685,689,704,707,712,729,732,741,749,753,755,760,764,771,778,826,888,
896,900,913,915,921,929,933,935,940,944,948,953,959,964,967,971,982,988,
998,1014,1021,1069,1077];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class JavaScriptParser extends JavaScriptParserBase {

    static grammarFileName = "JavaScriptParser.g4";
    static literalNames = [ null, null, null, null, null, "'['", "']'", 
                            "'('", "')'", "'{'", null, "'}'", "';'", "','", 
                            "'='", "'?'", "'?.'", "':'", "'...'", "'.'", 
                            "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", 
                            "'*'", "'/'", "'%'", "'**'", "'??'", "'#'", 
                            "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", 
                            "'>='", "'=='", "'!='", "'==='", "'!=='", "'&'", 
                            "'^'", "'|'", "'&&'", "'||'", "'*='", "'/='", 
                            "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", 
                            "'&='", "'^='", "'|='", "'**='", "'=>'", "'null'", 
                            null, null, null, null, null, null, null, null, 
                            null, null, "'break'", "'do'", "'instanceof'", 
                            "'typeof'", "'case'", "'else'", "'new'", "'var'", 
                            "'catch'", "'finally'", "'return'", "'void'", 
                            "'continue'", "'for'", "'switch'", "'while'", 
                            "'debugger'", "'function'", "'this'", "'with'", 
                            "'default'", "'if'", "'throw'", "'delete'", 
                            "'in'", "'try'", "'as'", "'from'", "'class'", 
                            "'enum'", "'extends'", "'super'", "'const'", 
                            "'export'", "'import'", "'async'", "'await'", 
                            "'yield'", "'implements'", null, null, "'private'", 
                            "'public'", "'interface'", "'package'", "'protected'", 
                            "'static'", null, null, null, null, null, null, 
                            null, null, "'${'" ];
    static symbolicNames = [ null, "HashBangLine", "MultiLineComment", "SingleLineComment", 
                             "RegularExpressionLiteral", "OpenBracket", 
                             "CloseBracket", "OpenParen", "CloseParen", 
                             "OpenBrace", "TemplateCloseBrace", "CloseBrace", 
                             "SemiColon", "Comma", "Assign", "QuestionMark", 
                             "QuestionMarkDot", "Colon", "Ellipsis", "Dot", 
                             "PlusPlus", "MinusMinus", "Plus", "Minus", 
                             "BitNot", "Not", "Multiply", "Divide", "Modulus", 
                             "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic", 
                             "LeftShiftArithmetic", "RightShiftLogical", 
                             "LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", 
                             "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
                             "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
                             "DivideAssign", "ModulusAssign", "PlusAssign", 
                             "MinusAssign", "LeftShiftArithmeticAssign", 
                             "RightShiftArithmeticAssign", "RightShiftLogicalAssign", 
                             "BitAndAssign", "BitXorAssign", "BitOrAssign", 
                             "PowerAssign", "ARROW", "NullLiteral", "BooleanLiteral", 
                             "DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", 
                             "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
                             "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
                             "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", 
                             "Break", "Do", "Instanceof", "Typeof", "Case", 
                             "Else", "New", "Var", "Catch", "Finally", "Return", 
                             "Void", "Continue", "For", "Switch", "While", 
                             "Debugger", "Function_", "This", "With", "Default", 
                             "If", "Throw", "Delete", "In", "Try", "As", 
                             "From", "Class", "Enum", "Extends", "Super", 
                             "Const", "Export", "Import", "Async", "Await", 
                             "Yield", "Implements", "StrictLet", "NonStrictLet", 
                             "Private", "Public", "Interface", "Package", 
                             "Protected", "Static", "Identifier", "StringLiteral", 
                             "BackTick", "WhiteSpaces", "LineTerminator", 
                             "HtmlComment", "CDataComment", "UnexpectedCharacter", 
                             "TemplateStringStartExpression", "TemplateStringAtom" ];
    static ruleNames = [ "program", "sourceElement", "statement", "block", 
                         "statementList", "importStatement", "importFromBlock", 
                         "importModuleItems", "importAliasName", "moduleExportName", 
                         "importedBinding", "importDefault", "importNamespace", 
                         "importFrom", "aliasName", "exportStatement", "exportFromBlock", 
                         "exportModuleItems", "exportAliasName", "declaration", 
                         "variableStatement", "variableDeclarationList", 
                         "variableDeclaration", "emptyStatement_", "expressionStatement", 
                         "ifStatement", "iterationStatement", "varModifier", 
                         "continueStatement", "breakStatement", "returnStatement", 
                         "yieldStatement", "withStatement", "switchStatement", 
                         "caseBlock", "caseClauses", "caseClause", "defaultClause", 
                         "labelledStatement", "throwStatement", "tryStatement", 
                         "catchProduction", "finallyProduction", "debuggerStatement", 
                         "functionDeclaration", "classDeclaration", "classTail", 
                         "classElement", "methodDefinition", "formalParameterList", 
                         "formalParameterArg", "lastFormalParameterArg", 
                         "functionBody", "sourceElements", "arrayLiteral", 
                         "elementList", "arrayElement", "propertyAssignment", 
                         "propertyName", "arguments", "argument", "expressionSequence", 
                         "singleExpression", "assignable", "objectLiteral", 
                         "anonymousFunction", "arrowFunctionParameters", 
                         "arrowFunctionBody", "assignmentOperator", "literal", 
                         "templateStringLiteral", "templateStringAtom", 
                         "numericLiteral", "bigintLiteral", "getter", "setter", 
                         "identifierName", "identifier", "reservedWord", 
                         "keyword", "let_", "eos" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = JavaScriptParser.ruleNames;
        this.literalNames = JavaScriptParser.literalNames;
        this.symbolicNames = JavaScriptParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 24:
    	    		return this.expressionStatement_sempred(localctx, predIndex);
    	case 26:
    	    		return this.iterationStatement_sempred(localctx, predIndex);
    	case 28:
    	    		return this.continueStatement_sempred(localctx, predIndex);
    	case 29:
    	    		return this.breakStatement_sempred(localctx, predIndex);
    	case 30:
    	    		return this.returnStatement_sempred(localctx, predIndex);
    	case 31:
    	    		return this.yieldStatement_sempred(localctx, predIndex);
    	case 39:
    	    		return this.throwStatement_sempred(localctx, predIndex);
    	case 47:
    	    		return this.classElement_sempred(localctx, predIndex);
    	case 62:
    	    		return this.singleExpression_sempred(localctx, predIndex);
    	case 74:
    	    		return this.getter_sempred(localctx, predIndex);
    	case 75:
    	    		return this.setter_sempred(localctx, predIndex);
    	case 81:
    	    		return this.eos_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expressionStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.notOpenBraceAndNotFunction();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    iterationStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.p("of");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    continueStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    breakStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    returnStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    yieldStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    throwStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    classElement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.n("static");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    singleExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 46);
    		case 9:
    			return this.precpred(this._ctx, 27);
    		case 10:
    			return this.precpred(this._ctx, 26);
    		case 11:
    			return this.precpred(this._ctx, 25);
    		case 12:
    			return this.precpred(this._ctx, 24);
    		case 13:
    			return this.precpred(this._ctx, 23);
    		case 14:
    			return this.precpred(this._ctx, 22);
    		case 15:
    			return this.precpred(this._ctx, 21);
    		case 16:
    			return this.precpred(this._ctx, 20);
    		case 17:
    			return this.precpred(this._ctx, 19);
    		case 18:
    			return this.precpred(this._ctx, 18);
    		case 19:
    			return this.precpred(this._ctx, 17);
    		case 20:
    			return this.precpred(this._ctx, 16);
    		case 21:
    			return this.precpred(this._ctx, 15);
    		case 22:
    			return this.precpred(this._ctx, 14);
    		case 23:
    			return this.precpred(this._ctx, 13);
    		case 24:
    			return this.precpred(this._ctx, 12);
    		case 25:
    			return this.precpred(this._ctx, 11);
    		case 26:
    			return this.precpred(this._ctx, 45);
    		case 27:
    			return this.precpred(this._ctx, 44);
    		case 28:
    			return this.precpred(this._ctx, 41);
    		case 29:
    			return this.precpred(this._ctx, 39);
    		case 30:
    			return this.notLineTerminator();
    		case 31:
    			return this.precpred(this._ctx, 38);
    		case 32:
    			return this.notLineTerminator();
    		case 33:
    			return this.precpred(this._ctx, 9);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    getter_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 34:
    			return this.n("get");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    setter_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 35:
    			return this.n("set");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    eos_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 36:
    			return this.lineTerminatorAhead();
    		case 37:
    			return this.closeBrace();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, JavaScriptParser.RULE_program);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 165;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        if(la_===1) {
	            this.state = 164;
	            this.match(JavaScriptParser.HashBangLine);

	        }
	        this.state = 168;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        if(la_===1) {
	            this.state = 167;
	            this.sourceElements();

	        }
	        this.state = 170;
	        this.match(JavaScriptParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceElement() {
	    let localctx = new SourceElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, JavaScriptParser.RULE_sourceElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 172;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, JavaScriptParser.RULE_statement);
	    try {
	        this.state = 194;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 174;
	            this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 175;
	            this.variableStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 176;
	            this.importStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 177;
	            this.exportStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 178;
	            this.emptyStatement_();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 179;
	            this.classDeclaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 180;
	            this.functionDeclaration();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 181;
	            this.expressionStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 182;
	            this.ifStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 183;
	            this.iterationStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 184;
	            this.continueStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 185;
	            this.breakStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 186;
	            this.returnStatement();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 187;
	            this.yieldStatement();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 188;
	            this.withStatement();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 189;
	            this.labelledStatement();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 190;
	            this.switchStatement();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 191;
	            this.throwStatement();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 192;
	            this.tryStatement();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 193;
	            this.debuggerStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, JavaScriptParser.RULE_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 196;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 198;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        if(la_===1) {
	            this.state = 197;
	            this.statementList();

	        }
	        this.state = 200;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementList() {
	    let localctx = new StatementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, JavaScriptParser.RULE_statementList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 203; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 202;
	        		this.statement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 205; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,4, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importStatement() {
	    let localctx = new ImportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, JavaScriptParser.RULE_importStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 207;
	        this.match(JavaScriptParser.Import);
	        this.state = 208;
	        this.importFromBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importFromBlock() {
	    let localctx = new ImportFromBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, JavaScriptParser.RULE_importFromBlock);
	    try {
	        this.state = 222;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 9:
	        case 26:
	        case 61:
	        case 62:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 211;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	            if(la_===1) {
	                this.state = 210;
	                this.importDefault();

	            }
	            this.state = 215;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 26:
	            case 61:
	            case 62:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	                this.state = 213;
	                this.importNamespace();
	                break;
	            case 9:
	                this.state = 214;
	                this.importModuleItems();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 217;
	            this.importFrom();
	            this.state = 218;
	            this.eos();
	            break;
	        case 120:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 220;
	            this.match(JavaScriptParser.StringLiteral);
	            this.state = 221;
	            this.eos();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importModuleItems() {
	    let localctx = new ImportModuleItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, JavaScriptParser.RULE_importModuleItems);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 224;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 230;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 225;
	                this.importAliasName();
	                this.state = 226;
	                this.match(JavaScriptParser.Comma); 
	            }
	            this.state = 232;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
	        }

	        this.state = 237;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 61)) & ~0x1f) === 0 && ((1 << (_la - 61)) & 4294965251) !== 0) || ((((_la - 93)) & ~0x1f) === 0 && ((1 << (_la - 93)) & 268435455) !== 0)) {
	            this.state = 233;
	            this.importAliasName();
	            this.state = 235;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 234;
	                this.match(JavaScriptParser.Comma);
	            }

	        }

	        this.state = 239;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importAliasName() {
	    let localctx = new ImportAliasNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, JavaScriptParser.RULE_importAliasName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 241;
	        this.moduleExportName();
	        this.state = 244;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 242;
	            this.match(JavaScriptParser.As);
	            this.state = 243;
	            this.importedBinding();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleExportName() {
	    let localctx = new ModuleExportNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, JavaScriptParser.RULE_moduleExportName);
	    try {
	        this.state = 248;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 61:
	        case 62:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 246;
	            this.identifierName();
	            break;
	        case 120:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 247;
	            this.match(JavaScriptParser.StringLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importedBinding() {
	    let localctx = new ImportedBindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, JavaScriptParser.RULE_importedBinding);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 250;
	        _la = this._input.LA(1);
	        if(!(((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 2051) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDefault() {
	    let localctx = new ImportDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, JavaScriptParser.RULE_importDefault);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 252;
	        this.aliasName();
	        this.state = 253;
	        this.match(JavaScriptParser.Comma);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importNamespace() {
	    let localctx = new ImportNamespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, JavaScriptParser.RULE_importNamespace);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 257;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 26:
	            this.state = 255;
	            this.match(JavaScriptParser.Multiply);
	            break;
	        case 61:
	        case 62:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	            this.state = 256;
	            this.identifierName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 261;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 259;
	            this.match(JavaScriptParser.As);
	            this.state = 260;
	            this.identifierName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importFrom() {
	    let localctx = new ImportFromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, JavaScriptParser.RULE_importFrom);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 263;
	        this.match(JavaScriptParser.From);
	        this.state = 264;
	        this.match(JavaScriptParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aliasName() {
	    let localctx = new AliasNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, JavaScriptParser.RULE_aliasName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 266;
	        this.identifierName();
	        this.state = 269;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 267;
	            this.match(JavaScriptParser.As);
	            this.state = 268;
	            this.identifierName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exportStatement() {
	    let localctx = new ExportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, JavaScriptParser.RULE_exportStatement);
	    try {
	        this.state = 286;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ExportDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 271;
	            this.match(JavaScriptParser.Export);
	            this.state = 273;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	            if(la_===1) {
	                this.state = 272;
	                this.match(JavaScriptParser.Default);

	            }
	            this.state = 277;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 275;
	                this.exportFromBlock();
	                break;

	            case 2:
	                this.state = 276;
	                this.declaration();
	                break;

	            }
	            this.state = 279;
	            this.eos();
	            break;

	        case 2:
	            localctx = new ExportDefaultDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 281;
	            this.match(JavaScriptParser.Export);
	            this.state = 282;
	            this.match(JavaScriptParser.Default);
	            this.state = 283;
	            this.singleExpression(0);
	            this.state = 284;
	            this.eos();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exportFromBlock() {
	    let localctx = new ExportFromBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, JavaScriptParser.RULE_exportFromBlock);
	    try {
	        this.state = 298;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 26:
	        case 61:
	        case 62:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 288;
	            this.importNamespace();
	            this.state = 289;
	            this.importFrom();
	            this.state = 290;
	            this.eos();
	            break;
	        case 9:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 292;
	            this.exportModuleItems();
	            this.state = 294;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	            if(la_===1) {
	                this.state = 293;
	                this.importFrom();

	            }
	            this.state = 296;
	            this.eos();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exportModuleItems() {
	    let localctx = new ExportModuleItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, JavaScriptParser.RULE_exportModuleItems);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 300;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 306;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 301;
	                this.exportAliasName();
	                this.state = 302;
	                this.match(JavaScriptParser.Comma); 
	            }
	            this.state = 308;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
	        }

	        this.state = 313;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 61)) & ~0x1f) === 0 && ((1 << (_la - 61)) & 4294965251) !== 0) || ((((_la - 93)) & ~0x1f) === 0 && ((1 << (_la - 93)) & 268435455) !== 0)) {
	            this.state = 309;
	            this.exportAliasName();
	            this.state = 311;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 310;
	                this.match(JavaScriptParser.Comma);
	            }

	        }

	        this.state = 315;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exportAliasName() {
	    let localctx = new ExportAliasNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, JavaScriptParser.RULE_exportAliasName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 317;
	        this.moduleExportName();
	        this.state = 320;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 318;
	            this.match(JavaScriptParser.As);
	            this.state = 319;
	            this.moduleExportName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, JavaScriptParser.RULE_declaration);
	    try {
	        this.state = 325;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 79:
	        case 104:
	        case 111:
	        case 112:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 322;
	            this.variableStatement();
	            break;
	        case 100:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 323;
	            this.classDeclaration();
	            break;
	        case 89:
	        case 107:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 324;
	            this.functionDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableStatement() {
	    let localctx = new VariableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, JavaScriptParser.RULE_variableStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 327;
	        this.variableDeclarationList();
	        this.state = 328;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarationList() {
	    let localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, JavaScriptParser.RULE_variableDeclarationList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 330;
	        this.varModifier();
	        this.state = 331;
	        this.variableDeclaration();
	        this.state = 336;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 332;
	                this.match(JavaScriptParser.Comma);
	                this.state = 333;
	                this.variableDeclaration(); 
	            }
	            this.state = 338;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaration() {
	    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, JavaScriptParser.RULE_variableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 339;
	        this.assignable();
	        this.state = 342;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        if(la_===1) {
	            this.state = 340;
	            this.match(JavaScriptParser.Assign);
	            this.state = 341;
	            this.singleExpression(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStatement_() {
	    let localctx = new EmptyStatement_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, JavaScriptParser.RULE_emptyStatement_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 344;
	        this.match(JavaScriptParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, JavaScriptParser.RULE_expressionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 346;
	        if (!( this.notOpenBraceAndNotFunction())) {
	            throw new antlr4.error.FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
	        }
	        this.state = 347;
	        this.expressionSequence();
	        this.state = 348;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, JavaScriptParser.RULE_ifStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 350;
	        this.match(JavaScriptParser.If);
	        this.state = 351;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 352;
	        this.expressionSequence();
	        this.state = 353;
	        this.match(JavaScriptParser.CloseParen);
	        this.state = 354;
	        this.statement();
	        this.state = 357;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        if(la_===1) {
	            this.state = 355;
	            this.match(JavaScriptParser.Else);
	            this.state = 356;
	            this.statement();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterationStatement() {
	    let localctx = new IterationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, JavaScriptParser.RULE_iterationStatement);
	    var _la = 0;
	    try {
	        this.state = 415;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DoStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 359;
	            this.match(JavaScriptParser.Do);
	            this.state = 360;
	            this.statement();
	            this.state = 361;
	            this.match(JavaScriptParser.While);
	            this.state = 362;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 363;
	            this.expressionSequence();
	            this.state = 364;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 365;
	            this.eos();
	            break;

	        case 2:
	            localctx = new WhileStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 367;
	            this.match(JavaScriptParser.While);
	            this.state = 368;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 369;
	            this.expressionSequence();
	            this.state = 370;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 371;
	            this.statement();
	            break;

	        case 3:
	            localctx = new ForStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 373;
	            this.match(JavaScriptParser.For);
	            this.state = 374;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 377;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	            if(la_===1) {
	                this.state = 375;
	                this.expressionSequence();

	            } else if(la_===2) {
	                this.state = 376;
	                this.variableDeclarationList();

	            }
	            this.state = 379;
	            this.match(JavaScriptParser.SemiColon);
	            this.state = 381;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 66060976) !== 0) || ((((_la - 61)) & ~0x1f) === 0 && ((1 << (_la - 61)) & 809650175) !== 0) || ((((_la - 95)) & ~0x1f) === 0 && ((1 << (_la - 95)) & 117602617) !== 0)) {
	                this.state = 380;
	                this.expressionSequence();
	            }

	            this.state = 383;
	            this.match(JavaScriptParser.SemiColon);
	            this.state = 385;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 66060976) !== 0) || ((((_la - 61)) & ~0x1f) === 0 && ((1 << (_la - 61)) & 809650175) !== 0) || ((((_la - 95)) & ~0x1f) === 0 && ((1 << (_la - 95)) & 117602617) !== 0)) {
	                this.state = 384;
	                this.expressionSequence();
	            }

	            this.state = 387;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 388;
	            this.statement();
	            break;

	        case 4:
	            localctx = new ForInStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 389;
	            this.match(JavaScriptParser.For);
	            this.state = 390;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 393;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 391;
	                this.singleExpression(0);
	                break;

	            case 2:
	                this.state = 392;
	                this.variableDeclarationList();
	                break;

	            }
	            this.state = 395;
	            this.match(JavaScriptParser.In);
	            this.state = 396;
	            this.expressionSequence();
	            this.state = 397;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 398;
	            this.statement();
	            break;

	        case 5:
	            localctx = new ForOfStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 400;
	            this.match(JavaScriptParser.For);
	            this.state = 402;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===108) {
	                this.state = 401;
	                this.match(JavaScriptParser.Await);
	            }

	            this.state = 404;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 407;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 405;
	                this.singleExpression(0);
	                break;

	            case 2:
	                this.state = 406;
	                this.variableDeclarationList();
	                break;

	            }
	            this.state = 409;
	            this.identifier();
	            this.state = 410;
	            if (!( this.p("of"))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.p(\"of\")");
	            }
	            this.state = 411;
	            this.expressionSequence();
	            this.state = 412;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 413;
	            this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varModifier() {
	    let localctx = new VarModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, JavaScriptParser.RULE_varModifier);
	    try {
	        this.state = 420;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 79:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 417;
	            this.match(JavaScriptParser.Var);
	            break;
	        case 111:
	        case 112:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 418;
	            this.let_();
	            break;
	        case 104:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 419;
	            this.match(JavaScriptParser.Const);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, JavaScriptParser.RULE_continueStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 422;
	        this.match(JavaScriptParser.Continue);
	        this.state = 425;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        if(la_===1) {
	            this.state = 423;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 424;
	            this.identifier();

	        }
	        this.state = 427;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, JavaScriptParser.RULE_breakStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 429;
	        this.match(JavaScriptParser.Break);
	        this.state = 432;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        if(la_===1) {
	            this.state = 430;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 431;
	            this.identifier();

	        }
	        this.state = 434;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, JavaScriptParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 436;
	        this.match(JavaScriptParser.Return);
	        this.state = 439;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        if(la_===1) {
	            this.state = 437;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 438;
	            this.expressionSequence();

	        }
	        this.state = 441;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldStatement() {
	    let localctx = new YieldStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, JavaScriptParser.RULE_yieldStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 443;
	        this.match(JavaScriptParser.Yield);
	        this.state = 446;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        if(la_===1) {
	            this.state = 444;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 445;
	            this.expressionSequence();

	        }
	        this.state = 448;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withStatement() {
	    let localctx = new WithStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, JavaScriptParser.RULE_withStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 450;
	        this.match(JavaScriptParser.With);
	        this.state = 451;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 452;
	        this.expressionSequence();
	        this.state = 453;
	        this.match(JavaScriptParser.CloseParen);
	        this.state = 454;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchStatement() {
	    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, JavaScriptParser.RULE_switchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 456;
	        this.match(JavaScriptParser.Switch);
	        this.state = 457;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 458;
	        this.expressionSequence();
	        this.state = 459;
	        this.match(JavaScriptParser.CloseParen);
	        this.state = 460;
	        this.caseBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseBlock() {
	    let localctx = new CaseBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, JavaScriptParser.RULE_caseBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 462;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 464;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 463;
	            this.caseClauses();
	        }

	        this.state = 470;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===92) {
	            this.state = 466;
	            this.defaultClause();
	            this.state = 468;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===76) {
	                this.state = 467;
	                this.caseClauses();
	            }

	        }

	        this.state = 472;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClauses() {
	    let localctx = new CaseClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, JavaScriptParser.RULE_caseClauses);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 475; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 474;
	            this.caseClause();
	            this.state = 477; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===76);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClause() {
	    let localctx = new CaseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, JavaScriptParser.RULE_caseClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 479;
	        this.match(JavaScriptParser.Case);
	        this.state = 480;
	        this.expressionSequence();
	        this.state = 481;
	        this.match(JavaScriptParser.Colon);
	        this.state = 483;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        if(la_===1) {
	            this.state = 482;
	            this.statementList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultClause() {
	    let localctx = new DefaultClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, JavaScriptParser.RULE_defaultClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 485;
	        this.match(JavaScriptParser.Default);
	        this.state = 486;
	        this.match(JavaScriptParser.Colon);
	        this.state = 488;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        if(la_===1) {
	            this.state = 487;
	            this.statementList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelledStatement() {
	    let localctx = new LabelledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, JavaScriptParser.RULE_labelledStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 490;
	        this.identifier();
	        this.state = 491;
	        this.match(JavaScriptParser.Colon);
	        this.state = 492;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwStatement() {
	    let localctx = new ThrowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, JavaScriptParser.RULE_throwStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 494;
	        this.match(JavaScriptParser.Throw);
	        this.state = 495;
	        if (!( this.notLineTerminator())) {
	            throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	        }
	        this.state = 496;
	        this.expressionSequence();
	        this.state = 497;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryStatement() {
	    let localctx = new TryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, JavaScriptParser.RULE_tryStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 499;
	        this.match(JavaScriptParser.Try);
	        this.state = 500;
	        this.block();
	        this.state = 506;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 80:
	            this.state = 501;
	            this.catchProduction();
	            this.state = 503;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	            if(la_===1) {
	                this.state = 502;
	                this.finallyProduction();

	            }
	            break;
	        case 81:
	            this.state = 505;
	            this.finallyProduction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchProduction() {
	    let localctx = new CatchProductionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, JavaScriptParser.RULE_catchProduction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 508;
	        this.match(JavaScriptParser.Catch);
	        this.state = 514;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 509;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 511;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5 || _la===9 || ((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 2114051) !== 0)) {
	                this.state = 510;
	                this.assignable();
	            }

	            this.state = 513;
	            this.match(JavaScriptParser.CloseParen);
	        }

	        this.state = 516;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finallyProduction() {
	    let localctx = new FinallyProductionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, JavaScriptParser.RULE_finallyProduction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 518;
	        this.match(JavaScriptParser.Finally);
	        this.state = 519;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	debuggerStatement() {
	    let localctx = new DebuggerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, JavaScriptParser.RULE_debuggerStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 521;
	        this.match(JavaScriptParser.Debugger);
	        this.state = 522;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDeclaration() {
	    let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, JavaScriptParser.RULE_functionDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 525;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===107) {
	            this.state = 524;
	            this.match(JavaScriptParser.Async);
	        }

	        this.state = 527;
	        this.match(JavaScriptParser.Function_);
	        this.state = 529;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===26) {
	            this.state = 528;
	            this.match(JavaScriptParser.Multiply);
	        }

	        this.state = 531;
	        this.identifier();
	        this.state = 532;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 534;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 262688) !== 0) || ((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 2114051) !== 0)) {
	            this.state = 533;
	            this.formalParameterList();
	        }

	        this.state = 536;
	        this.match(JavaScriptParser.CloseParen);
	        this.state = 537;
	        this.functionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classDeclaration() {
	    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, JavaScriptParser.RULE_classDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 539;
	        this.match(JavaScriptParser.Class);
	        this.state = 540;
	        this.identifier();
	        this.state = 541;
	        this.classTail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classTail() {
	    let localctx = new ClassTailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, JavaScriptParser.RULE_classTail);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 545;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102) {
	            this.state = 543;
	            this.match(JavaScriptParser.Extends);
	            this.state = 544;
	            this.singleExpression(0);
	        }

	        this.state = 547;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 551;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 548;
	                this.classElement(); 
	            }
	            this.state = 553;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
	        }

	        this.state = 554;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classElement() {
	    let localctx = new ClassElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, JavaScriptParser.RULE_classElement);
	    var _la = 0;
	    try {
	        this.state = 581;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 562;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,57,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 560;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 556;
	                        this.match(JavaScriptParser.Static);
	                        break;

	                    case 2:
	                        this.state = 557;
	                        if (!( this.n("static"))) {
	                            throw new antlr4.error.FailedPredicateException(this, "this.n(\"static\")");
	                        }
	                        this.state = 558;
	                        this.identifier();
	                        break;

	                    case 3:
	                        this.state = 559;
	                        this.match(JavaScriptParser.Async);
	                        break;

	                    } 
	                }
	                this.state = 564;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,57,this._ctx);
	            }

	            this.state = 571;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 565;
	                this.methodDefinition();
	                break;

	            case 2:
	                this.state = 566;
	                this.assignable();
	                this.state = 567;
	                this.match(JavaScriptParser.Assign);
	                this.state = 568;
	                this.objectLiteral();
	                this.state = 569;
	                this.match(JavaScriptParser.SemiColon);
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 573;
	            this.emptyStatement_();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 575;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===31) {
	                this.state = 574;
	                this.match(JavaScriptParser.Hashtag);
	            }

	            this.state = 577;
	            this.propertyName();
	            this.state = 578;
	            this.match(JavaScriptParser.Assign);
	            this.state = 579;
	            this.singleExpression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDefinition() {
	    let localctx = new MethodDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, JavaScriptParser.RULE_methodDefinition);
	    var _la = 0;
	    try {
	        this.state = 622;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 584;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===26) {
	                this.state = 583;
	                this.match(JavaScriptParser.Multiply);
	            }

	            this.state = 587;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===31) {
	                this.state = 586;
	                this.match(JavaScriptParser.Hashtag);
	            }

	            this.state = 589;
	            this.propertyName();
	            this.state = 590;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 592;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 262688) !== 0) || ((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 2114051) !== 0)) {
	                this.state = 591;
	                this.formalParameterList();
	            }

	            this.state = 594;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 595;
	            this.functionBody();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 598;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	            if(la_===1) {
	                this.state = 597;
	                this.match(JavaScriptParser.Multiply);

	            }
	            this.state = 601;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	            if(la_===1) {
	                this.state = 600;
	                this.match(JavaScriptParser.Hashtag);

	            }
	            this.state = 603;
	            this.getter();
	            this.state = 604;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 605;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 606;
	            this.functionBody();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 609;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	            if(la_===1) {
	                this.state = 608;
	                this.match(JavaScriptParser.Multiply);

	            }
	            this.state = 612;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	            if(la_===1) {
	                this.state = 611;
	                this.match(JavaScriptParser.Hashtag);

	            }
	            this.state = 614;
	            this.setter();
	            this.state = 615;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 617;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 262688) !== 0) || ((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 2114051) !== 0)) {
	                this.state = 616;
	                this.formalParameterList();
	            }

	            this.state = 619;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 620;
	            this.functionBody();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, JavaScriptParser.RULE_formalParameterList);
	    var _la = 0;
	    try {
	        this.state = 637;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 9:
	        case 98:
	        case 99:
	        case 107:
	        case 112:
	        case 119:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 624;
	            this.formalParameterArg();
	            this.state = 629;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 625;
	                    this.match(JavaScriptParser.Comma);
	                    this.state = 626;
	                    this.formalParameterArg(); 
	                }
	                this.state = 631;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
	            }

	            this.state = 634;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 632;
	                this.match(JavaScriptParser.Comma);
	                this.state = 633;
	                this.lastFormalParameterArg();
	            }

	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 636;
	            this.lastFormalParameterArg();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterArg() {
	    let localctx = new FormalParameterArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, JavaScriptParser.RULE_formalParameterArg);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 639;
	        this.assignable();
	        this.state = 642;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===14) {
	            this.state = 640;
	            this.match(JavaScriptParser.Assign);
	            this.state = 641;
	            this.singleExpression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lastFormalParameterArg() {
	    let localctx = new LastFormalParameterArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, JavaScriptParser.RULE_lastFormalParameterArg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 644;
	        this.match(JavaScriptParser.Ellipsis);
	        this.state = 645;
	        this.singleExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBody() {
	    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, JavaScriptParser.RULE_functionBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 647;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 649;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        if(la_===1) {
	            this.state = 648;
	            this.sourceElements();

	        }
	        this.state = 651;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceElements() {
	    let localctx = new SourceElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, JavaScriptParser.RULE_sourceElements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 654; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 653;
	        		this.sourceElement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 656; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,75, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayLiteral() {
	    let localctx = new ArrayLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, JavaScriptParser.RULE_arrayLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 658;
	        this.match(JavaScriptParser.OpenBracket);
	        this.state = 659;
	        this.elementList();
	        this.state = 660;
	        this.match(JavaScriptParser.CloseBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementList() {
	    let localctx = new ElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, JavaScriptParser.RULE_elementList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 665;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 662;
	                this.match(JavaScriptParser.Comma); 
	            }
	            this.state = 667;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
	        }

	        this.state = 669;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 66323120) !== 0) || ((((_la - 61)) & ~0x1f) === 0 && ((1 << (_la - 61)) & 809650175) !== 0) || ((((_la - 95)) & ~0x1f) === 0 && ((1 << (_la - 95)) & 117602617) !== 0)) {
	            this.state = 668;
	            this.arrayElement();
	        }

	        this.state = 679;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 672; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 671;
	                    this.match(JavaScriptParser.Comma);
	                    this.state = 674; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===13);
	                this.state = 676;
	                this.arrayElement(); 
	            }
	            this.state = 681;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
	        }

	        this.state = 685;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===13) {
	            this.state = 682;
	            this.match(JavaScriptParser.Comma);
	            this.state = 687;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayElement() {
	    let localctx = new ArrayElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, JavaScriptParser.RULE_arrayElement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 689;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18) {
	            this.state = 688;
	            this.match(JavaScriptParser.Ellipsis);
	        }

	        this.state = 691;
	        this.singleExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyAssignment() {
	    let localctx = new PropertyAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, JavaScriptParser.RULE_propertyAssignment);
	    var _la = 0;
	    try {
	        this.state = 732;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PropertyExpressionAssignmentContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 693;
	            this.propertyName();
	            this.state = 694;
	            this.match(JavaScriptParser.Colon);
	            this.state = 695;
	            this.singleExpression(0);
	            break;

	        case 2:
	            localctx = new ComputedPropertyExpressionAssignmentContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 697;
	            this.match(JavaScriptParser.OpenBracket);
	            this.state = 698;
	            this.singleExpression(0);
	            this.state = 699;
	            this.match(JavaScriptParser.CloseBracket);
	            this.state = 700;
	            this.match(JavaScriptParser.Colon);
	            this.state = 701;
	            this.singleExpression(0);
	            break;

	        case 3:
	            localctx = new FunctionPropertyContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 704;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	            if(la_===1) {
	                this.state = 703;
	                this.match(JavaScriptParser.Async);

	            }
	            this.state = 707;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===26) {
	                this.state = 706;
	                this.match(JavaScriptParser.Multiply);
	            }

	            this.state = 709;
	            this.propertyName();
	            this.state = 710;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 712;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 262688) !== 0) || ((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 2114051) !== 0)) {
	                this.state = 711;
	                this.formalParameterList();
	            }

	            this.state = 714;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 715;
	            this.functionBody();
	            break;

	        case 4:
	            localctx = new PropertyGetterContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 717;
	            this.getter();
	            this.state = 718;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 719;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 720;
	            this.functionBody();
	            break;

	        case 5:
	            localctx = new PropertySetterContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 722;
	            this.setter();
	            this.state = 723;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 724;
	            this.formalParameterArg();
	            this.state = 725;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 726;
	            this.functionBody();
	            break;

	        case 6:
	            localctx = new PropertyShorthandContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 729;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18) {
	                this.state = 728;
	                this.match(JavaScriptParser.Ellipsis);
	            }

	            this.state = 731;
	            this.singleExpression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyName() {
	    let localctx = new PropertyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, JavaScriptParser.RULE_propertyName);
	    try {
	        this.state = 741;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 61:
	        case 62:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 734;
	            this.identifierName();
	            break;
	        case 120:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 735;
	            this.match(JavaScriptParser.StringLiteral);
	            break;
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 736;
	            this.numericLiteral();
	            break;
	        case 5:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 737;
	            this.match(JavaScriptParser.OpenBracket);
	            this.state = 738;
	            this.singleExpression(0);
	            this.state = 739;
	            this.match(JavaScriptParser.CloseBracket);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, JavaScriptParser.RULE_arguments);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 743;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 755;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 66323120) !== 0) || ((((_la - 61)) & ~0x1f) === 0 && ((1 << (_la - 61)) & 809650175) !== 0) || ((((_la - 95)) & ~0x1f) === 0 && ((1 << (_la - 95)) & 117602617) !== 0)) {
	            this.state = 744;
	            this.argument();
	            this.state = 749;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 745;
	                    this.match(JavaScriptParser.Comma);
	                    this.state = 746;
	                    this.argument(); 
	                }
	                this.state = 751;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
	            }

	            this.state = 753;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 752;
	                this.match(JavaScriptParser.Comma);
	            }

	        }

	        this.state = 757;
	        this.match(JavaScriptParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, JavaScriptParser.RULE_argument);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 760;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18) {
	            this.state = 759;
	            this.match(JavaScriptParser.Ellipsis);
	        }

	        this.state = 764;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 762;
	            this.singleExpression(0);
	            break;

	        case 2:
	            this.state = 763;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionSequence() {
	    let localctx = new ExpressionSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, JavaScriptParser.RULE_expressionSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 766;
	        this.singleExpression(0);
	        this.state = 771;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,93,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 767;
	                this.match(JavaScriptParser.Comma);
	                this.state = 768;
	                this.singleExpression(0); 
	            }
	            this.state = 773;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,93,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	singleExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new SingleExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 124;
	    this.enterRecursionRule(localctx, 124, JavaScriptParser.RULE_singleExpression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 826;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new FunctionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 775;
	            this.anonymousFunction();
	            break;

	        case 2:
	            localctx = new ClassExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 776;
	            this.match(JavaScriptParser.Class);
	            this.state = 778;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 2114051) !== 0)) {
	                this.state = 777;
	                this.identifier();
	            }

	            this.state = 780;
	            this.classTail();
	            break;

	        case 3:
	            localctx = new NewExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 781;
	            this.match(JavaScriptParser.New);
	            this.state = 782;
	            this.singleExpression(0);
	            this.state = 783;
	            this.arguments();
	            break;

	        case 4:
	            localctx = new NewExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 785;
	            this.match(JavaScriptParser.New);
	            this.state = 786;
	            this.singleExpression(42);
	            break;

	        case 5:
	            localctx = new MetaExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 787;
	            this.match(JavaScriptParser.New);
	            this.state = 788;
	            this.match(JavaScriptParser.Dot);
	            this.state = 789;
	            this.identifier();
	            break;

	        case 6:
	            localctx = new DeleteExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 790;
	            this.match(JavaScriptParser.Delete);
	            this.state = 791;
	            this.singleExpression(37);
	            break;

	        case 7:
	            localctx = new VoidExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 792;
	            this.match(JavaScriptParser.Void);
	            this.state = 793;
	            this.singleExpression(36);
	            break;

	        case 8:
	            localctx = new TypeofExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 794;
	            this.match(JavaScriptParser.Typeof);
	            this.state = 795;
	            this.singleExpression(35);
	            break;

	        case 9:
	            localctx = new PreIncrementExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 796;
	            this.match(JavaScriptParser.PlusPlus);
	            this.state = 797;
	            this.singleExpression(34);
	            break;

	        case 10:
	            localctx = new PreDecreaseExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 798;
	            this.match(JavaScriptParser.MinusMinus);
	            this.state = 799;
	            this.singleExpression(33);
	            break;

	        case 11:
	            localctx = new UnaryPlusExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 800;
	            this.match(JavaScriptParser.Plus);
	            this.state = 801;
	            this.singleExpression(32);
	            break;

	        case 12:
	            localctx = new UnaryMinusExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 802;
	            this.match(JavaScriptParser.Minus);
	            this.state = 803;
	            this.singleExpression(31);
	            break;

	        case 13:
	            localctx = new BitNotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 804;
	            this.match(JavaScriptParser.BitNot);
	            this.state = 805;
	            this.singleExpression(30);
	            break;

	        case 14:
	            localctx = new NotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 806;
	            this.match(JavaScriptParser.Not);
	            this.state = 807;
	            this.singleExpression(29);
	            break;

	        case 15:
	            localctx = new AwaitExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 808;
	            this.match(JavaScriptParser.Await);
	            this.state = 809;
	            this.singleExpression(28);
	            break;

	        case 16:
	            localctx = new ImportExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 810;
	            this.match(JavaScriptParser.Import);
	            this.state = 811;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 812;
	            this.singleExpression(0);
	            this.state = 813;
	            this.match(JavaScriptParser.CloseParen);
	            break;

	        case 17:
	            localctx = new YieldExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 815;
	            this.yieldStatement();
	            break;

	        case 18:
	            localctx = new ThisExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 816;
	            this.match(JavaScriptParser.This);
	            break;

	        case 19:
	            localctx = new IdentifierExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 817;
	            this.identifier();
	            break;

	        case 20:
	            localctx = new SuperExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 818;
	            this.match(JavaScriptParser.Super);
	            break;

	        case 21:
	            localctx = new LiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 819;
	            this.literal();
	            break;

	        case 22:
	            localctx = new ArrayLiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 820;
	            this.arrayLiteral();
	            break;

	        case 23:
	            localctx = new ObjectLiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 821;
	            this.objectLiteral();
	            break;

	        case 24:
	            localctx = new ParenthesizedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 822;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 823;
	            this.expressionSequence();
	            this.state = 824;
	            this.match(JavaScriptParser.CloseParen);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 915;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,100,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 913;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new OptionalChainExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 828;
	                    if (!( this.precpred(this._ctx, 46))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 46)");
	                    }
	                    this.state = 829;
	                    this.match(JavaScriptParser.QuestionMarkDot);
	                    this.state = 830;
	                    this.singleExpression(47);
	                    break;

	                case 2:
	                    localctx = new PowerExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 831;
	                    if (!( this.precpred(this._ctx, 27))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
	                    }
	                    this.state = 832;
	                    this.match(JavaScriptParser.Power);
	                    this.state = 833;
	                    this.singleExpression(27);
	                    break;

	                case 3:
	                    localctx = new MultiplicativeExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 834;
	                    if (!( this.precpred(this._ctx, 26))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
	                    }
	                    this.state = 835;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 469762048) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 836;
	                    this.singleExpression(27);
	                    break;

	                case 4:
	                    localctx = new AdditiveExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 837;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 838;
	                    _la = this._input.LA(1);
	                    if(!(_la===22 || _la===23)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 839;
	                    this.singleExpression(26);
	                    break;

	                case 5:
	                    localctx = new CoalesceExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 840;
	                    if (!( this.precpred(this._ctx, 24))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
	                    }
	                    this.state = 841;
	                    this.match(JavaScriptParser.NullCoalesce);
	                    this.state = 842;
	                    this.singleExpression(25);
	                    break;

	                case 6:
	                    localctx = new BitShiftExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 843;
	                    if (!( this.precpred(this._ctx, 23))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
	                    }
	                    this.state = 844;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 7) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 845;
	                    this.singleExpression(24);
	                    break;

	                case 7:
	                    localctx = new RelationalExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 846;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 847;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 15) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 848;
	                    this.singleExpression(23);
	                    break;

	                case 8:
	                    localctx = new InstanceofExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 849;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 850;
	                    this.match(JavaScriptParser.Instanceof);
	                    this.state = 851;
	                    this.singleExpression(22);
	                    break;

	                case 9:
	                    localctx = new InExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 852;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 853;
	                    this.match(JavaScriptParser.In);
	                    this.state = 854;
	                    this.singleExpression(21);
	                    break;

	                case 10:
	                    localctx = new EqualityExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 855;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 856;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 15) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 857;
	                    this.singleExpression(20);
	                    break;

	                case 11:
	                    localctx = new BitAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 858;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 859;
	                    this.match(JavaScriptParser.BitAnd);
	                    this.state = 860;
	                    this.singleExpression(19);
	                    break;

	                case 12:
	                    localctx = new BitXOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 861;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 862;
	                    this.match(JavaScriptParser.BitXOr);
	                    this.state = 863;
	                    this.singleExpression(18);
	                    break;

	                case 13:
	                    localctx = new BitOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 864;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 865;
	                    this.match(JavaScriptParser.BitOr);
	                    this.state = 866;
	                    this.singleExpression(17);
	                    break;

	                case 14:
	                    localctx = new LogicalAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 867;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 868;
	                    this.match(JavaScriptParser.And);
	                    this.state = 869;
	                    this.singleExpression(16);
	                    break;

	                case 15:
	                    localctx = new LogicalOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 870;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 871;
	                    this.match(JavaScriptParser.Or);
	                    this.state = 872;
	                    this.singleExpression(15);
	                    break;

	                case 16:
	                    localctx = new TernaryExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 873;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 874;
	                    this.match(JavaScriptParser.QuestionMark);
	                    this.state = 875;
	                    this.singleExpression(0);
	                    this.state = 876;
	                    this.match(JavaScriptParser.Colon);
	                    this.state = 877;
	                    this.singleExpression(14);
	                    break;

	                case 17:
	                    localctx = new AssignmentExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 879;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 880;
	                    this.match(JavaScriptParser.Assign);
	                    this.state = 881;
	                    this.singleExpression(12);
	                    break;

	                case 18:
	                    localctx = new AssignmentOperatorExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 882;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 883;
	                    this.assignmentOperator();
	                    this.state = 884;
	                    this.singleExpression(11);
	                    break;

	                case 19:
	                    localctx = new MemberIndexExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 886;
	                    if (!( this.precpred(this._ctx, 45))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 45)");
	                    }
	                    this.state = 888;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===16) {
	                        this.state = 887;
	                        this.match(JavaScriptParser.QuestionMarkDot);
	                    }

	                    this.state = 890;
	                    this.match(JavaScriptParser.OpenBracket);
	                    this.state = 891;
	                    this.expressionSequence();
	                    this.state = 892;
	                    this.match(JavaScriptParser.CloseBracket);
	                    break;

	                case 20:
	                    localctx = new MemberDotExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 894;
	                    if (!( this.precpred(this._ctx, 44))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 44)");
	                    }
	                    this.state = 896;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===15) {
	                        this.state = 895;
	                        this.match(JavaScriptParser.QuestionMark);
	                    }

	                    this.state = 898;
	                    this.match(JavaScriptParser.Dot);
	                    this.state = 900;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===31) {
	                        this.state = 899;
	                        this.match(JavaScriptParser.Hashtag);
	                    }

	                    this.state = 902;
	                    this.identifierName();
	                    break;

	                case 21:
	                    localctx = new ArgumentsExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 903;
	                    if (!( this.precpred(this._ctx, 41))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 41)");
	                    }
	                    this.state = 904;
	                    this.arguments();
	                    break;

	                case 22:
	                    localctx = new PostIncrementExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 905;
	                    if (!( this.precpred(this._ctx, 39))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 39)");
	                    }
	                    this.state = 906;
	                    if (!( this.notLineTerminator())) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	                    }
	                    this.state = 907;
	                    this.match(JavaScriptParser.PlusPlus);
	                    break;

	                case 23:
	                    localctx = new PostDecreaseExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 908;
	                    if (!( this.precpred(this._ctx, 38))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 38)");
	                    }
	                    this.state = 909;
	                    if (!( this.notLineTerminator())) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	                    }
	                    this.state = 910;
	                    this.match(JavaScriptParser.MinusMinus);
	                    break;

	                case 24:
	                    localctx = new TemplateStringExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 911;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 912;
	                    this.templateStringLiteral();
	                    break;

	                } 
	            }
	            this.state = 917;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,100,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	assignable() {
	    let localctx = new AssignableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, JavaScriptParser.RULE_assignable);
	    try {
	        this.state = 921;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 98:
	        case 99:
	        case 107:
	        case 112:
	        case 119:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 918;
	            this.identifier();
	            break;
	        case 5:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 919;
	            this.arrayLiteral();
	            break;
	        case 9:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 920;
	            this.objectLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectLiteral() {
	    let localctx = new ObjectLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, JavaScriptParser.RULE_objectLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 923;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 935;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        if(la_===1) {
	            this.state = 924;
	            this.propertyAssignment();
	            this.state = 929;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 925;
	                    this.match(JavaScriptParser.Comma);
	                    this.state = 926;
	                    this.propertyAssignment(); 
	                }
	                this.state = 931;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
	            }

	            this.state = 933;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 932;
	                this.match(JavaScriptParser.Comma);
	            }


	        }
	        this.state = 937;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anonymousFunction() {
	    let localctx = new AnonymousFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, JavaScriptParser.RULE_anonymousFunction);
	    var _la = 0;
	    try {
	        this.state = 959;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AnonymousFunctionDeclContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 940;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===107) {
	                this.state = 939;
	                this.match(JavaScriptParser.Async);
	            }

	            this.state = 942;
	            this.match(JavaScriptParser.Function_);
	            this.state = 944;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===26) {
	                this.state = 943;
	                this.match(JavaScriptParser.Multiply);
	            }

	            this.state = 946;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 948;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 262688) !== 0) || ((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 2114051) !== 0)) {
	                this.state = 947;
	                this.formalParameterList();
	            }

	            this.state = 950;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 951;
	            this.functionBody();
	            break;

	        case 2:
	            localctx = new ArrowFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 953;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	            if(la_===1) {
	                this.state = 952;
	                this.match(JavaScriptParser.Async);

	            }
	            this.state = 955;
	            this.arrowFunctionParameters();
	            this.state = 956;
	            this.match(JavaScriptParser.ARROW);
	            this.state = 957;
	            this.arrowFunctionBody();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrowFunctionParameters() {
	    let localctx = new ArrowFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, JavaScriptParser.RULE_arrowFunctionParameters);
	    var _la = 0;
	    try {
	        this.state = 967;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 98:
	        case 99:
	        case 107:
	        case 112:
	        case 119:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 961;
	            this.identifier();
	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 962;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 964;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 262688) !== 0) || ((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 2114051) !== 0)) {
	                this.state = 963;
	                this.formalParameterList();
	            }

	            this.state = 966;
	            this.match(JavaScriptParser.CloseParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrowFunctionBody() {
	    let localctx = new ArrowFunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, JavaScriptParser.RULE_arrowFunctionBody);
	    try {
	        this.state = 971;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 969;
	            this.singleExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 970;
	            this.functionBody();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, JavaScriptParser.RULE_assignmentOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 973;
	        _la = this._input.LA(1);
	        if(!(((((_la - 48)) & ~0x1f) === 0 && ((1 << (_la - 48)) & 4095) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, JavaScriptParser.RULE_literal);
	    try {
	        this.state = 982;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 61:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 975;
	            this.match(JavaScriptParser.NullLiteral);
	            break;
	        case 62:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 976;
	            this.match(JavaScriptParser.BooleanLiteral);
	            break;
	        case 120:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 977;
	            this.match(JavaScriptParser.StringLiteral);
	            break;
	        case 121:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 978;
	            this.templateStringLiteral();
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 979;
	            this.match(JavaScriptParser.RegularExpressionLiteral);
	            break;
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 980;
	            this.numericLiteral();
	            break;
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 981;
	            this.bigintLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateStringLiteral() {
	    let localctx = new TemplateStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, JavaScriptParser.RULE_templateStringLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 984;
	        this.match(JavaScriptParser.BackTick);
	        this.state = 988;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===127 || _la===128) {
	            this.state = 985;
	            this.templateStringAtom();
	            this.state = 990;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 991;
	        this.match(JavaScriptParser.BackTick);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateStringAtom() {
	    let localctx = new TemplateStringAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, JavaScriptParser.RULE_templateStringAtom);
	    try {
	        this.state = 998;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 128:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 993;
	            this.match(JavaScriptParser.TemplateStringAtom);
	            break;
	        case 127:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 994;
	            this.match(JavaScriptParser.TemplateStringStartExpression);
	            this.state = 995;
	            this.singleExpression(0);
	            this.state = 996;
	            this.match(JavaScriptParser.TemplateCloseBrace);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, JavaScriptParser.RULE_numericLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1000;
	        _la = this._input.LA(1);
	        if(!(((((_la - 63)) & ~0x1f) === 0 && ((1 << (_la - 63)) & 31) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bigintLiteral() {
	    let localctx = new BigintLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, JavaScriptParser.RULE_bigintLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1002;
	        _la = this._input.LA(1);
	        if(!(((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getter() {
	    let localctx = new GetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, JavaScriptParser.RULE_getter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1004;
	        if (!( this.n("get"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.n(\"get\")");
	        }
	        this.state = 1005;
	        this.identifier();
	        this.state = 1006;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setter() {
	    let localctx = new SetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, JavaScriptParser.RULE_setter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1008;
	        if (!( this.n("set"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.n(\"set\")");
	        }
	        this.state = 1009;
	        this.identifier();
	        this.state = 1010;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierName() {
	    let localctx = new IdentifierNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, JavaScriptParser.RULE_identifierName);
	    try {
	        this.state = 1014;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1012;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1013;
	            this.reservedWord();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, JavaScriptParser.RULE_identifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1016;
	        _la = this._input.LA(1);
	        if(!(((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 2114051) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reservedWord() {
	    let localctx = new ReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, JavaScriptParser.RULE_reservedWord);
	    try {
	        this.state = 1021;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1018;
	            this.keyword();
	            break;
	        case 61:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1019;
	            this.match(JavaScriptParser.NullLiteral);
	            break;
	        case 62:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1020;
	            this.match(JavaScriptParser.BooleanLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, JavaScriptParser.RULE_keyword);
	    try {
	        this.state = 1069;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 72:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1023;
	            this.match(JavaScriptParser.Break);
	            break;
	        case 73:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1024;
	            this.match(JavaScriptParser.Do);
	            break;
	        case 74:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1025;
	            this.match(JavaScriptParser.Instanceof);
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1026;
	            this.match(JavaScriptParser.Typeof);
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1027;
	            this.match(JavaScriptParser.Case);
	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1028;
	            this.match(JavaScriptParser.Else);
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1029;
	            this.match(JavaScriptParser.New);
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1030;
	            this.match(JavaScriptParser.Var);
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1031;
	            this.match(JavaScriptParser.Catch);
	            break;
	        case 81:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1032;
	            this.match(JavaScriptParser.Finally);
	            break;
	        case 82:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1033;
	            this.match(JavaScriptParser.Return);
	            break;
	        case 83:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1034;
	            this.match(JavaScriptParser.Void);
	            break;
	        case 84:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1035;
	            this.match(JavaScriptParser.Continue);
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1036;
	            this.match(JavaScriptParser.For);
	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1037;
	            this.match(JavaScriptParser.Switch);
	            break;
	        case 87:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1038;
	            this.match(JavaScriptParser.While);
	            break;
	        case 88:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1039;
	            this.match(JavaScriptParser.Debugger);
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1040;
	            this.match(JavaScriptParser.Function_);
	            break;
	        case 90:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1041;
	            this.match(JavaScriptParser.This);
	            break;
	        case 91:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1042;
	            this.match(JavaScriptParser.With);
	            break;
	        case 92:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1043;
	            this.match(JavaScriptParser.Default);
	            break;
	        case 93:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1044;
	            this.match(JavaScriptParser.If);
	            break;
	        case 94:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1045;
	            this.match(JavaScriptParser.Throw);
	            break;
	        case 95:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1046;
	            this.match(JavaScriptParser.Delete);
	            break;
	        case 96:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1047;
	            this.match(JavaScriptParser.In);
	            break;
	        case 97:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1048;
	            this.match(JavaScriptParser.Try);
	            break;
	        case 100:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1049;
	            this.match(JavaScriptParser.Class);
	            break;
	        case 101:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1050;
	            this.match(JavaScriptParser.Enum);
	            break;
	        case 102:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1051;
	            this.match(JavaScriptParser.Extends);
	            break;
	        case 103:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1052;
	            this.match(JavaScriptParser.Super);
	            break;
	        case 104:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 1053;
	            this.match(JavaScriptParser.Const);
	            break;
	        case 105:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 1054;
	            this.match(JavaScriptParser.Export);
	            break;
	        case 106:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 1055;
	            this.match(JavaScriptParser.Import);
	            break;
	        case 110:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 1056;
	            this.match(JavaScriptParser.Implements);
	            break;
	        case 111:
	        case 112:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 1057;
	            this.let_();
	            break;
	        case 113:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 1058;
	            this.match(JavaScriptParser.Private);
	            break;
	        case 114:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 1059;
	            this.match(JavaScriptParser.Public);
	            break;
	        case 115:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 1060;
	            this.match(JavaScriptParser.Interface);
	            break;
	        case 116:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 1061;
	            this.match(JavaScriptParser.Package);
	            break;
	        case 117:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 1062;
	            this.match(JavaScriptParser.Protected);
	            break;
	        case 118:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 1063;
	            this.match(JavaScriptParser.Static);
	            break;
	        case 109:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 1064;
	            this.match(JavaScriptParser.Yield);
	            break;
	        case 107:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 1065;
	            this.match(JavaScriptParser.Async);
	            break;
	        case 108:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 1066;
	            this.match(JavaScriptParser.Await);
	            break;
	        case 99:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 1067;
	            this.match(JavaScriptParser.From);
	            break;
	        case 98:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 1068;
	            this.match(JavaScriptParser.As);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	let_() {
	    let localctx = new Let_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, JavaScriptParser.RULE_let_);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1071;
	        _la = this._input.LA(1);
	        if(!(_la===111 || _la===112)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eos() {
	    let localctx = new EosContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, JavaScriptParser.RULE_eos);
	    try {
	        this.state = 1077;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1073;
	            this.match(JavaScriptParser.SemiColon);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1074;
	            this.match(JavaScriptParser.EOF);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1075;
	            if (!( this.lineTerminatorAhead())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.lineTerminatorAhead()");
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1076;
	            if (!( this.closeBrace())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.closeBrace()");
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

JavaScriptParser.EOF = antlr4.Token.EOF;
JavaScriptParser.HashBangLine = 1;
JavaScriptParser.MultiLineComment = 2;
JavaScriptParser.SingleLineComment = 3;
JavaScriptParser.RegularExpressionLiteral = 4;
JavaScriptParser.OpenBracket = 5;
JavaScriptParser.CloseBracket = 6;
JavaScriptParser.OpenParen = 7;
JavaScriptParser.CloseParen = 8;
JavaScriptParser.OpenBrace = 9;
JavaScriptParser.TemplateCloseBrace = 10;
JavaScriptParser.CloseBrace = 11;
JavaScriptParser.SemiColon = 12;
JavaScriptParser.Comma = 13;
JavaScriptParser.Assign = 14;
JavaScriptParser.QuestionMark = 15;
JavaScriptParser.QuestionMarkDot = 16;
JavaScriptParser.Colon = 17;
JavaScriptParser.Ellipsis = 18;
JavaScriptParser.Dot = 19;
JavaScriptParser.PlusPlus = 20;
JavaScriptParser.MinusMinus = 21;
JavaScriptParser.Plus = 22;
JavaScriptParser.Minus = 23;
JavaScriptParser.BitNot = 24;
JavaScriptParser.Not = 25;
JavaScriptParser.Multiply = 26;
JavaScriptParser.Divide = 27;
JavaScriptParser.Modulus = 28;
JavaScriptParser.Power = 29;
JavaScriptParser.NullCoalesce = 30;
JavaScriptParser.Hashtag = 31;
JavaScriptParser.RightShiftArithmetic = 32;
JavaScriptParser.LeftShiftArithmetic = 33;
JavaScriptParser.RightShiftLogical = 34;
JavaScriptParser.LessThan = 35;
JavaScriptParser.MoreThan = 36;
JavaScriptParser.LessThanEquals = 37;
JavaScriptParser.GreaterThanEquals = 38;
JavaScriptParser.Equals_ = 39;
JavaScriptParser.NotEquals = 40;
JavaScriptParser.IdentityEquals = 41;
JavaScriptParser.IdentityNotEquals = 42;
JavaScriptParser.BitAnd = 43;
JavaScriptParser.BitXOr = 44;
JavaScriptParser.BitOr = 45;
JavaScriptParser.And = 46;
JavaScriptParser.Or = 47;
JavaScriptParser.MultiplyAssign = 48;
JavaScriptParser.DivideAssign = 49;
JavaScriptParser.ModulusAssign = 50;
JavaScriptParser.PlusAssign = 51;
JavaScriptParser.MinusAssign = 52;
JavaScriptParser.LeftShiftArithmeticAssign = 53;
JavaScriptParser.RightShiftArithmeticAssign = 54;
JavaScriptParser.RightShiftLogicalAssign = 55;
JavaScriptParser.BitAndAssign = 56;
JavaScriptParser.BitXorAssign = 57;
JavaScriptParser.BitOrAssign = 58;
JavaScriptParser.PowerAssign = 59;
JavaScriptParser.ARROW = 60;
JavaScriptParser.NullLiteral = 61;
JavaScriptParser.BooleanLiteral = 62;
JavaScriptParser.DecimalLiteral = 63;
JavaScriptParser.HexIntegerLiteral = 64;
JavaScriptParser.OctalIntegerLiteral = 65;
JavaScriptParser.OctalIntegerLiteral2 = 66;
JavaScriptParser.BinaryIntegerLiteral = 67;
JavaScriptParser.BigHexIntegerLiteral = 68;
JavaScriptParser.BigOctalIntegerLiteral = 69;
JavaScriptParser.BigBinaryIntegerLiteral = 70;
JavaScriptParser.BigDecimalIntegerLiteral = 71;
JavaScriptParser.Break = 72;
JavaScriptParser.Do = 73;
JavaScriptParser.Instanceof = 74;
JavaScriptParser.Typeof = 75;
JavaScriptParser.Case = 76;
JavaScriptParser.Else = 77;
JavaScriptParser.New = 78;
JavaScriptParser.Var = 79;
JavaScriptParser.Catch = 80;
JavaScriptParser.Finally = 81;
JavaScriptParser.Return = 82;
JavaScriptParser.Void = 83;
JavaScriptParser.Continue = 84;
JavaScriptParser.For = 85;
JavaScriptParser.Switch = 86;
JavaScriptParser.While = 87;
JavaScriptParser.Debugger = 88;
JavaScriptParser.Function_ = 89;
JavaScriptParser.This = 90;
JavaScriptParser.With = 91;
JavaScriptParser.Default = 92;
JavaScriptParser.If = 93;
JavaScriptParser.Throw = 94;
JavaScriptParser.Delete = 95;
JavaScriptParser.In = 96;
JavaScriptParser.Try = 97;
JavaScriptParser.As = 98;
JavaScriptParser.From = 99;
JavaScriptParser.Class = 100;
JavaScriptParser.Enum = 101;
JavaScriptParser.Extends = 102;
JavaScriptParser.Super = 103;
JavaScriptParser.Const = 104;
JavaScriptParser.Export = 105;
JavaScriptParser.Import = 106;
JavaScriptParser.Async = 107;
JavaScriptParser.Await = 108;
JavaScriptParser.Yield = 109;
JavaScriptParser.Implements = 110;
JavaScriptParser.StrictLet = 111;
JavaScriptParser.NonStrictLet = 112;
JavaScriptParser.Private = 113;
JavaScriptParser.Public = 114;
JavaScriptParser.Interface = 115;
JavaScriptParser.Package = 116;
JavaScriptParser.Protected = 117;
JavaScriptParser.Static = 118;
JavaScriptParser.Identifier = 119;
JavaScriptParser.StringLiteral = 120;
JavaScriptParser.BackTick = 121;
JavaScriptParser.WhiteSpaces = 122;
JavaScriptParser.LineTerminator = 123;
JavaScriptParser.HtmlComment = 124;
JavaScriptParser.CDataComment = 125;
JavaScriptParser.UnexpectedCharacter = 126;
JavaScriptParser.TemplateStringStartExpression = 127;
JavaScriptParser.TemplateStringAtom = 128;

JavaScriptParser.RULE_program = 0;
JavaScriptParser.RULE_sourceElement = 1;
JavaScriptParser.RULE_statement = 2;
JavaScriptParser.RULE_block = 3;
JavaScriptParser.RULE_statementList = 4;
JavaScriptParser.RULE_importStatement = 5;
JavaScriptParser.RULE_importFromBlock = 6;
JavaScriptParser.RULE_importModuleItems = 7;
JavaScriptParser.RULE_importAliasName = 8;
JavaScriptParser.RULE_moduleExportName = 9;
JavaScriptParser.RULE_importedBinding = 10;
JavaScriptParser.RULE_importDefault = 11;
JavaScriptParser.RULE_importNamespace = 12;
JavaScriptParser.RULE_importFrom = 13;
JavaScriptParser.RULE_aliasName = 14;
JavaScriptParser.RULE_exportStatement = 15;
JavaScriptParser.RULE_exportFromBlock = 16;
JavaScriptParser.RULE_exportModuleItems = 17;
JavaScriptParser.RULE_exportAliasName = 18;
JavaScriptParser.RULE_declaration = 19;
JavaScriptParser.RULE_variableStatement = 20;
JavaScriptParser.RULE_variableDeclarationList = 21;
JavaScriptParser.RULE_variableDeclaration = 22;
JavaScriptParser.RULE_emptyStatement_ = 23;
JavaScriptParser.RULE_expressionStatement = 24;
JavaScriptParser.RULE_ifStatement = 25;
JavaScriptParser.RULE_iterationStatement = 26;
JavaScriptParser.RULE_varModifier = 27;
JavaScriptParser.RULE_continueStatement = 28;
JavaScriptParser.RULE_breakStatement = 29;
JavaScriptParser.RULE_returnStatement = 30;
JavaScriptParser.RULE_yieldStatement = 31;
JavaScriptParser.RULE_withStatement = 32;
JavaScriptParser.RULE_switchStatement = 33;
JavaScriptParser.RULE_caseBlock = 34;
JavaScriptParser.RULE_caseClauses = 35;
JavaScriptParser.RULE_caseClause = 36;
JavaScriptParser.RULE_defaultClause = 37;
JavaScriptParser.RULE_labelledStatement = 38;
JavaScriptParser.RULE_throwStatement = 39;
JavaScriptParser.RULE_tryStatement = 40;
JavaScriptParser.RULE_catchProduction = 41;
JavaScriptParser.RULE_finallyProduction = 42;
JavaScriptParser.RULE_debuggerStatement = 43;
JavaScriptParser.RULE_functionDeclaration = 44;
JavaScriptParser.RULE_classDeclaration = 45;
JavaScriptParser.RULE_classTail = 46;
JavaScriptParser.RULE_classElement = 47;
JavaScriptParser.RULE_methodDefinition = 48;
JavaScriptParser.RULE_formalParameterList = 49;
JavaScriptParser.RULE_formalParameterArg = 50;
JavaScriptParser.RULE_lastFormalParameterArg = 51;
JavaScriptParser.RULE_functionBody = 52;
JavaScriptParser.RULE_sourceElements = 53;
JavaScriptParser.RULE_arrayLiteral = 54;
JavaScriptParser.RULE_elementList = 55;
JavaScriptParser.RULE_arrayElement = 56;
JavaScriptParser.RULE_propertyAssignment = 57;
JavaScriptParser.RULE_propertyName = 58;
JavaScriptParser.RULE_arguments = 59;
JavaScriptParser.RULE_argument = 60;
JavaScriptParser.RULE_expressionSequence = 61;
JavaScriptParser.RULE_singleExpression = 62;
JavaScriptParser.RULE_assignable = 63;
JavaScriptParser.RULE_objectLiteral = 64;
JavaScriptParser.RULE_anonymousFunction = 65;
JavaScriptParser.RULE_arrowFunctionParameters = 66;
JavaScriptParser.RULE_arrowFunctionBody = 67;
JavaScriptParser.RULE_assignmentOperator = 68;
JavaScriptParser.RULE_literal = 69;
JavaScriptParser.RULE_templateStringLiteral = 70;
JavaScriptParser.RULE_templateStringAtom = 71;
JavaScriptParser.RULE_numericLiteral = 72;
JavaScriptParser.RULE_bigintLiteral = 73;
JavaScriptParser.RULE_getter = 74;
JavaScriptParser.RULE_setter = 75;
JavaScriptParser.RULE_identifierName = 76;
JavaScriptParser.RULE_identifier = 77;
JavaScriptParser.RULE_reservedWord = 78;
JavaScriptParser.RULE_keyword = 79;
JavaScriptParser.RULE_let_ = 80;
JavaScriptParser.RULE_eos = 81;

class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_program;
    }

	EOF() {
	    return this.getToken(JavaScriptParser.EOF, 0);
	};

	HashBangLine() {
	    return this.getToken(JavaScriptParser.HashBangLine, 0);
	};

	sourceElements() {
	    return this.getTypedRuleContext(SourceElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitProgram(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitProgram(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SourceElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_sourceElement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSourceElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSourceElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitSourceElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_statement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	variableStatement() {
	    return this.getTypedRuleContext(VariableStatementContext,0);
	};

	importStatement() {
	    return this.getTypedRuleContext(ImportStatementContext,0);
	};

	exportStatement() {
	    return this.getTypedRuleContext(ExportStatementContext,0);
	};

	emptyStatement_() {
	    return this.getTypedRuleContext(EmptyStatement_Context,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	iterationStatement() {
	    return this.getTypedRuleContext(IterationStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	yieldStatement() {
	    return this.getTypedRuleContext(YieldStatementContext,0);
	};

	withStatement() {
	    return this.getTypedRuleContext(WithStatementContext,0);
	};

	labelledStatement() {
	    return this.getTypedRuleContext(LabelledStatementContext,0);
	};

	switchStatement() {
	    return this.getTypedRuleContext(SwitchStatementContext,0);
	};

	throwStatement() {
	    return this.getTypedRuleContext(ThrowStatementContext,0);
	};

	tryStatement() {
	    return this.getTypedRuleContext(TryStatementContext,0);
	};

	debuggerStatement() {
	    return this.getTypedRuleContext(DebuggerStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_block;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_statementList;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterStatementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitStatementList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitStatementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importStatement;
    }

	Import() {
	    return this.getToken(JavaScriptParser.Import, 0);
	};

	importFromBlock() {
	    return this.getTypedRuleContext(ImportFromBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportFromBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importFromBlock;
    }

	importFrom() {
	    return this.getTypedRuleContext(ImportFromContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	importNamespace() {
	    return this.getTypedRuleContext(ImportNamespaceContext,0);
	};

	importModuleItems() {
	    return this.getTypedRuleContext(ImportModuleItemsContext,0);
	};

	importDefault() {
	    return this.getTypedRuleContext(ImportDefaultContext,0);
	};

	StringLiteral() {
	    return this.getToken(JavaScriptParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportFromBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportFromBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportFromBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportModuleItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importModuleItems;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	importAliasName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportAliasNameContext);
	    } else {
	        return this.getTypedRuleContext(ImportAliasNameContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportModuleItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportModuleItems(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportModuleItems(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportAliasNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importAliasName;
    }

	moduleExportName() {
	    return this.getTypedRuleContext(ModuleExportNameContext,0);
	};

	As() {
	    return this.getToken(JavaScriptParser.As, 0);
	};

	importedBinding() {
	    return this.getTypedRuleContext(ImportedBindingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportAliasName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportAliasName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportAliasName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModuleExportNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_moduleExportName;
    }

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	StringLiteral() {
	    return this.getToken(JavaScriptParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterModuleExportName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitModuleExportName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitModuleExportName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportedBindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importedBinding;
    }

	Identifier() {
	    return this.getToken(JavaScriptParser.Identifier, 0);
	};

	Yield() {
	    return this.getToken(JavaScriptParser.Yield, 0);
	};

	Await() {
	    return this.getToken(JavaScriptParser.Await, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportedBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportedBinding(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportedBinding(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importDefault;
    }

	aliasName() {
	    return this.getTypedRuleContext(AliasNameContext,0);
	};

	Comma() {
	    return this.getToken(JavaScriptParser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportDefault(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportNamespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importNamespace;
    }

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	identifierName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierNameContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierNameContext,i);
	    }
	};

	As() {
	    return this.getToken(JavaScriptParser.As, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportNamespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportNamespace(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportNamespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportFromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importFrom;
    }

	From() {
	    return this.getToken(JavaScriptParser.From, 0);
	};

	StringLiteral() {
	    return this.getToken(JavaScriptParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportFrom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportFrom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AliasNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_aliasName;
    }

	identifierName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierNameContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierNameContext,i);
	    }
	};

	As() {
	    return this.getToken(JavaScriptParser.As, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAliasName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAliasName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAliasName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_exportStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExportDefaultDeclarationContext extends ExportStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Export() {
	    return this.getToken(JavaScriptParser.Export, 0);
	};

	Default() {
	    return this.getToken(JavaScriptParser.Default, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExportDefaultDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExportDefaultDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitExportDefaultDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ExportDefaultDeclarationContext = ExportDefaultDeclarationContext;

class ExportDeclarationContext extends ExportStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Export() {
	    return this.getToken(JavaScriptParser.Export, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	exportFromBlock() {
	    return this.getTypedRuleContext(ExportFromBlockContext,0);
	};

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	Default() {
	    return this.getToken(JavaScriptParser.Default, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExportDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitExportDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ExportDeclarationContext = ExportDeclarationContext;

class ExportFromBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_exportFromBlock;
    }

	importNamespace() {
	    return this.getTypedRuleContext(ImportNamespaceContext,0);
	};

	importFrom() {
	    return this.getTypedRuleContext(ImportFromContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	exportModuleItems() {
	    return this.getTypedRuleContext(ExportModuleItemsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExportFromBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExportFromBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitExportFromBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExportModuleItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_exportModuleItems;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	exportAliasName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExportAliasNameContext);
	    } else {
	        return this.getTypedRuleContext(ExportAliasNameContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExportModuleItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExportModuleItems(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitExportModuleItems(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExportAliasNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_exportAliasName;
    }

	moduleExportName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleExportNameContext);
	    } else {
	        return this.getTypedRuleContext(ModuleExportNameContext,i);
	    }
	};

	As() {
	    return this.getToken(JavaScriptParser.As, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExportAliasName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExportAliasName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitExportAliasName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_declaration;
    }

	variableStatement() {
	    return this.getTypedRuleContext(VariableStatementContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_variableStatement;
    }

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVariableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVariableStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitVariableStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_variableDeclarationList;
    }

	varModifier() {
	    return this.getTypedRuleContext(VarModifierContext,0);
	};

	variableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclarationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVariableDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVariableDeclarationList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitVariableDeclarationList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_variableDeclaration;
    }

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	Assign() {
	    return this.getToken(JavaScriptParser.Assign, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVariableDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EmptyStatement_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_emptyStatement_;
    }

	SemiColon() {
	    return this.getToken(JavaScriptParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterEmptyStatement_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitEmptyStatement_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitEmptyStatement_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_expressionStatement;
    }

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExpressionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitExpressionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_ifStatement;
    }

	If() {
	    return this.getToken(JavaScriptParser.If, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	Else() {
	    return this.getToken(JavaScriptParser.Else, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitIfStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitIfStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IterationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_iterationStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DoStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Do() {
	    return this.getToken(JavaScriptParser.Do, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	While() {
	    return this.getToken(JavaScriptParser.While, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDoStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitDoStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.DoStatementContext = DoStatementContext;

class WhileStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	While() {
	    return this.getToken(JavaScriptParser.While, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitWhileStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitWhileStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.WhileStatementContext = WhileStatementContext;

class ForStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(JavaScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	SemiColon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.SemiColon);
	    } else {
	        return this.getToken(JavaScriptParser.SemiColon, i);
	    }
	};


	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	expressionSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionSequenceContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionSequenceContext,i);
	    }
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitForStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitForStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ForStatementContext = ForStatementContext;

class ForInStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(JavaScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	In() {
	    return this.getToken(JavaScriptParser.In, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterForInStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitForInStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitForInStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ForInStatementContext = ForInStatementContext;

class ForOfStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(JavaScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	Await() {
	    return this.getToken(JavaScriptParser.Await, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterForOfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitForOfStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitForOfStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ForOfStatementContext = ForOfStatementContext;

class VarModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_varModifier;
    }

	Var() {
	    return this.getToken(JavaScriptParser.Var, 0);
	};

	let_() {
	    return this.getTypedRuleContext(Let_Context,0);
	};

	Const() {
	    return this.getToken(JavaScriptParser.Const, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVarModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVarModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitVarModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_continueStatement;
    }

	Continue() {
	    return this.getToken(JavaScriptParser.Continue, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitContinueStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitContinueStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_breakStatement;
    }

	Break() {
	    return this.getToken(JavaScriptParser.Break, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBreakStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBreakStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_returnStatement;
    }

	Return() {
	    return this.getToken(JavaScriptParser.Return, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitReturnStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class YieldStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_yieldStatement;
    }

	Yield() {
	    return this.getToken(JavaScriptParser.Yield, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterYieldStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitYieldStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitYieldStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_withStatement;
    }

	With() {
	    return this.getToken(JavaScriptParser.With, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterWithStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitWithStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitWithStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_switchStatement;
    }

	Switch() {
	    return this.getToken(JavaScriptParser.Switch, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	caseBlock() {
	    return this.getTypedRuleContext(CaseBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSwitchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSwitchStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitSwitchStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_caseBlock;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	caseClauses = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClausesContext);
	    } else {
	        return this.getTypedRuleContext(CaseClausesContext,i);
	    }
	};

	defaultClause() {
	    return this.getTypedRuleContext(DefaultClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCaseBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCaseBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitCaseBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_caseClauses;
    }

	caseClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClauseContext);
	    } else {
	        return this.getTypedRuleContext(CaseClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCaseClauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCaseClauses(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitCaseClauses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_caseClause;
    }

	Case() {
	    return this.getToken(JavaScriptParser.Case, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCaseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCaseClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitCaseClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_defaultClause;
    }

	Default() {
	    return this.getToken(JavaScriptParser.Default, 0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDefaultClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDefaultClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitDefaultClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_labelledStatement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLabelledStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLabelledStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLabelledStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ThrowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_throwStatement;
    }

	Throw() {
	    return this.getToken(JavaScriptParser.Throw, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterThrowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitThrowStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitThrowStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_tryStatement;
    }

	Try() {
	    return this.getToken(JavaScriptParser.Try, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	catchProduction() {
	    return this.getTypedRuleContext(CatchProductionContext,0);
	};

	finallyProduction() {
	    return this.getTypedRuleContext(FinallyProductionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTryStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitTryStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatchProductionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_catchProduction;
    }

	Catch() {
	    return this.getToken(JavaScriptParser.Catch, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCatchProduction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCatchProduction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitCatchProduction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FinallyProductionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_finallyProduction;
    }

	Finally() {
	    return this.getToken(JavaScriptParser.Finally, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFinallyProduction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFinallyProduction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFinallyProduction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DebuggerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_debuggerStatement;
    }

	Debugger() {
	    return this.getToken(JavaScriptParser.Debugger, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDebuggerStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDebuggerStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitDebuggerStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_functionDeclaration;
    }

	Function_() {
	    return this.getToken(JavaScriptParser.Function_, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFunctionDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_classDeclaration;
    }

	Class() {
	    return this.getToken(JavaScriptParser.Class, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	classTail() {
	    return this.getTypedRuleContext(ClassTailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterClassDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitClassDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitClassDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassTailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_classTail;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	Extends() {
	    return this.getToken(JavaScriptParser.Extends, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	classElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassElementContext);
	    } else {
	        return this.getTypedRuleContext(ClassElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterClassTail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitClassTail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitClassTail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_classElement;
    }

	methodDefinition() {
	    return this.getTypedRuleContext(MethodDefinitionContext,0);
	};

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	Assign() {
	    return this.getToken(JavaScriptParser.Assign, 0);
	};

	objectLiteral() {
	    return this.getTypedRuleContext(ObjectLiteralContext,0);
	};

	SemiColon() {
	    return this.getToken(JavaScriptParser.SemiColon, 0);
	};

	Static = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Static);
	    } else {
	        return this.getToken(JavaScriptParser.Static, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	Async = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Async);
	    } else {
	        return this.getToken(JavaScriptParser.Async, i);
	    }
	};


	emptyStatement_() {
	    return this.getTypedRuleContext(EmptyStatement_Context,0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Hashtag() {
	    return this.getToken(JavaScriptParser.Hashtag, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterClassElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitClassElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitClassElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_methodDefinition;
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	Hashtag() {
	    return this.getToken(JavaScriptParser.Hashtag, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	getter() {
	    return this.getTypedRuleContext(GetterContext,0);
	};

	setter() {
	    return this.getTypedRuleContext(SetterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMethodDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMethodDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitMethodDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_formalParameterList;
    }

	formalParameterArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterArgContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterArgContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	lastFormalParameterArg() {
	    return this.getTypedRuleContext(LastFormalParameterArgContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFormalParameterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFormalParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_formalParameterArg;
    }

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	Assign() {
	    return this.getToken(JavaScriptParser.Assign, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFormalParameterArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFormalParameterArg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFormalParameterArg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LastFormalParameterArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_lastFormalParameterArg;
    }

	Ellipsis() {
	    return this.getToken(JavaScriptParser.Ellipsis, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLastFormalParameterArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLastFormalParameterArg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLastFormalParameterArg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_functionBody;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	sourceElements() {
	    return this.getTypedRuleContext(SourceElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFunctionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SourceElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_sourceElements;
    }

	sourceElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SourceElementContext);
	    } else {
	        return this.getTypedRuleContext(SourceElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSourceElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSourceElements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitSourceElements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arrayLiteral;
    }

	OpenBracket() {
	    return this.getToken(JavaScriptParser.OpenBracket, 0);
	};

	elementList() {
	    return this.getTypedRuleContext(ElementListContext,0);
	};

	CloseBracket() {
	    return this.getToken(JavaScriptParser.CloseBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrayLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrayLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArrayLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_elementList;
    }

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	arrayElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArrayElementContext);
	    } else {
	        return this.getTypedRuleContext(ArrayElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitElementList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitElementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arrayElement;
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Ellipsis() {
	    return this.getToken(JavaScriptParser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrayElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrayElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArrayElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_propertyAssignment;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PropertyExpressionAssignmentContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertyExpressionAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertyExpressionAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPropertyExpressionAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PropertyExpressionAssignmentContext = PropertyExpressionAssignmentContext;

class ComputedPropertyExpressionAssignmentContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenBracket() {
	    return this.getToken(JavaScriptParser.OpenBracket, 0);
	};

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	CloseBracket() {
	    return this.getToken(JavaScriptParser.CloseBracket, 0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterComputedPropertyExpressionAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitComputedPropertyExpressionAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitComputedPropertyExpressionAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ComputedPropertyExpressionAssignmentContext = ComputedPropertyExpressionAssignmentContext;

class PropertyShorthandContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Ellipsis() {
	    return this.getToken(JavaScriptParser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertyShorthand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertyShorthand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPropertyShorthand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PropertyShorthandContext = PropertyShorthandContext;

class PropertySetterContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	setter() {
	    return this.getTypedRuleContext(SetterContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	formalParameterArg() {
	    return this.getTypedRuleContext(FormalParameterArgContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertySetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertySetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPropertySetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PropertySetterContext = PropertySetterContext;

class PropertyGetterContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	getter() {
	    return this.getTypedRuleContext(GetterContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertyGetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertyGetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPropertyGetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PropertyGetterContext = PropertyGetterContext;

class FunctionPropertyContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionProperty(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFunctionProperty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.FunctionPropertyContext = FunctionPropertyContext;

class PropertyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_propertyName;
    }

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	StringLiteral() {
	    return this.getToken(JavaScriptParser.StringLiteral, 0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	OpenBracket() {
	    return this.getToken(JavaScriptParser.OpenBracket, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	CloseBracket() {
	    return this.getToken(JavaScriptParser.CloseBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertyName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPropertyName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arguments;
    }

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_argument;
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Ellipsis() {
	    return this.getToken(JavaScriptParser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_expressionSequence;
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExpressionSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExpressionSequence(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitExpressionSequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_singleExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TemplateStringExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	templateStringLiteral() {
	    return this.getTypedRuleContext(TemplateStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTemplateStringExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTemplateStringExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitTemplateStringExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.TemplateStringExpressionContext = TemplateStringExpressionContext;

class TernaryExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	QuestionMark() {
	    return this.getToken(JavaScriptParser.QuestionMark, 0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTernaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTernaryExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitTernaryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.TernaryExpressionContext = TernaryExpressionContext;

class LogicalAndExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	And() {
	    return this.getToken(JavaScriptParser.And, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLogicalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLogicalAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLogicalAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.LogicalAndExpressionContext = LogicalAndExpressionContext;

class PowerExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Power() {
	    return this.getToken(JavaScriptParser.Power, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPowerExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPowerExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPowerExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PowerExpressionContext = PowerExpressionContext;

class PreIncrementExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PlusPlus() {
	    return this.getToken(JavaScriptParser.PlusPlus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPreIncrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPreIncrementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPreIncrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PreIncrementExpressionContext = PreIncrementExpressionContext;

class ObjectLiteralExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	objectLiteral() {
	    return this.getTypedRuleContext(ObjectLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterObjectLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitObjectLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitObjectLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ObjectLiteralExpressionContext = ObjectLiteralExpressionContext;

class MetaExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	New() {
	    return this.getToken(JavaScriptParser.New, 0);
	};

	Dot() {
	    return this.getToken(JavaScriptParser.Dot, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMetaExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMetaExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitMetaExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.MetaExpressionContext = MetaExpressionContext;

class InExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	In() {
	    return this.getToken(JavaScriptParser.In, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterInExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitInExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitInExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.InExpressionContext = InExpressionContext;

class LogicalOrExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Or() {
	    return this.getToken(JavaScriptParser.Or, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLogicalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLogicalOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLogicalOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.LogicalOrExpressionContext = LogicalOrExpressionContext;

class OptionalChainExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	QuestionMarkDot() {
	    return this.getToken(JavaScriptParser.QuestionMarkDot, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterOptionalChainExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitOptionalChainExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitOptionalChainExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.OptionalChainExpressionContext = OptionalChainExpressionContext;

class NotExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Not() {
	    return this.getToken(JavaScriptParser.Not, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitNotExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitNotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.NotExpressionContext = NotExpressionContext;

class PreDecreaseExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MinusMinus() {
	    return this.getToken(JavaScriptParser.MinusMinus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPreDecreaseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPreDecreaseExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPreDecreaseExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PreDecreaseExpressionContext = PreDecreaseExpressionContext;

class ArgumentsExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArgumentsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArgumentsExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArgumentsExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ArgumentsExpressionContext = ArgumentsExpressionContext;

class AwaitExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Await() {
	    return this.getToken(JavaScriptParser.Await, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAwaitExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAwaitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAwaitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.AwaitExpressionContext = AwaitExpressionContext;

class ThisExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	This() {
	    return this.getToken(JavaScriptParser.This, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterThisExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitThisExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitThisExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ThisExpressionContext = ThisExpressionContext;

class FunctionExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	anonymousFunction() {
	    return this.getTypedRuleContext(AnonymousFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFunctionExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.FunctionExpressionContext = FunctionExpressionContext;

class UnaryMinusExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Minus() {
	    return this.getToken(JavaScriptParser.Minus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterUnaryMinusExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitUnaryMinusExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitUnaryMinusExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.UnaryMinusExpressionContext = UnaryMinusExpressionContext;

class AssignmentExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Assign() {
	    return this.getToken(JavaScriptParser.Assign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAssignmentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAssignmentExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAssignmentExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.AssignmentExpressionContext = AssignmentExpressionContext;

class PostDecreaseExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	MinusMinus() {
	    return this.getToken(JavaScriptParser.MinusMinus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPostDecreaseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPostDecreaseExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPostDecreaseExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PostDecreaseExpressionContext = PostDecreaseExpressionContext;

class TypeofExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Typeof() {
	    return this.getToken(JavaScriptParser.Typeof, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTypeofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTypeofExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitTypeofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.TypeofExpressionContext = TypeofExpressionContext;

class InstanceofExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Instanceof() {
	    return this.getToken(JavaScriptParser.Instanceof, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterInstanceofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitInstanceofExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitInstanceofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.InstanceofExpressionContext = InstanceofExpressionContext;

class UnaryPlusExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Plus() {
	    return this.getToken(JavaScriptParser.Plus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterUnaryPlusExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitUnaryPlusExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitUnaryPlusExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.UnaryPlusExpressionContext = UnaryPlusExpressionContext;

class DeleteExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Delete() {
	    return this.getToken(JavaScriptParser.Delete, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDeleteExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDeleteExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitDeleteExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.DeleteExpressionContext = DeleteExpressionContext;

class ImportExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Import() {
	    return this.getToken(JavaScriptParser.Import, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ImportExpressionContext = ImportExpressionContext;

class EqualityExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Equals_() {
	    return this.getToken(JavaScriptParser.Equals_, 0);
	};

	NotEquals() {
	    return this.getToken(JavaScriptParser.NotEquals, 0);
	};

	IdentityEquals() {
	    return this.getToken(JavaScriptParser.IdentityEquals, 0);
	};

	IdentityNotEquals() {
	    return this.getToken(JavaScriptParser.IdentityNotEquals, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitEqualityExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitEqualityExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.EqualityExpressionContext = EqualityExpressionContext;

class BitXOrExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	BitXOr() {
	    return this.getToken(JavaScriptParser.BitXOr, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitXOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitXOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBitXOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.BitXOrExpressionContext = BitXOrExpressionContext;

class SuperExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Super() {
	    return this.getToken(JavaScriptParser.Super, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSuperExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSuperExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitSuperExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.SuperExpressionContext = SuperExpressionContext;

class MultiplicativeExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	Divide() {
	    return this.getToken(JavaScriptParser.Divide, 0);
	};

	Modulus() {
	    return this.getToken(JavaScriptParser.Modulus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitMultiplicativeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

class BitShiftExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	LeftShiftArithmetic() {
	    return this.getToken(JavaScriptParser.LeftShiftArithmetic, 0);
	};

	RightShiftArithmetic() {
	    return this.getToken(JavaScriptParser.RightShiftArithmetic, 0);
	};

	RightShiftLogical() {
	    return this.getToken(JavaScriptParser.RightShiftLogical, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitShiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitShiftExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBitShiftExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.BitShiftExpressionContext = BitShiftExpressionContext;

class ParenthesizedExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterParenthesizedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitParenthesizedExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitParenthesizedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

class AdditiveExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Plus() {
	    return this.getToken(JavaScriptParser.Plus, 0);
	};

	Minus() {
	    return this.getToken(JavaScriptParser.Minus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAdditiveExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.AdditiveExpressionContext = AdditiveExpressionContext;

class RelationalExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	LessThan() {
	    return this.getToken(JavaScriptParser.LessThan, 0);
	};

	MoreThan() {
	    return this.getToken(JavaScriptParser.MoreThan, 0);
	};

	LessThanEquals() {
	    return this.getToken(JavaScriptParser.LessThanEquals, 0);
	};

	GreaterThanEquals() {
	    return this.getToken(JavaScriptParser.GreaterThanEquals, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitRelationalExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitRelationalExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.RelationalExpressionContext = RelationalExpressionContext;

class PostIncrementExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	PlusPlus() {
	    return this.getToken(JavaScriptParser.PlusPlus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPostIncrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPostIncrementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPostIncrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PostIncrementExpressionContext = PostIncrementExpressionContext;

class YieldExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	yieldStatement() {
	    return this.getTypedRuleContext(YieldStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterYieldExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitYieldExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitYieldExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.YieldExpressionContext = YieldExpressionContext;

class BitNotExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BitNot() {
	    return this.getToken(JavaScriptParser.BitNot, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitNotExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBitNotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.BitNotExpressionContext = BitNotExpressionContext;

class NewExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	New() {
	    return this.getToken(JavaScriptParser.New, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterNewExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitNewExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitNewExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.NewExpressionContext = NewExpressionContext;

class LiteralExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.LiteralExpressionContext = LiteralExpressionContext;

class ArrayLiteralExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	arrayLiteral() {
	    return this.getTypedRuleContext(ArrayLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrayLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrayLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArrayLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ArrayLiteralExpressionContext = ArrayLiteralExpressionContext;

class MemberDotExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Dot() {
	    return this.getToken(JavaScriptParser.Dot, 0);
	};

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	QuestionMark() {
	    return this.getToken(JavaScriptParser.QuestionMark, 0);
	};

	Hashtag() {
	    return this.getToken(JavaScriptParser.Hashtag, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMemberDotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMemberDotExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitMemberDotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.MemberDotExpressionContext = MemberDotExpressionContext;

class ClassExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Class() {
	    return this.getToken(JavaScriptParser.Class, 0);
	};

	classTail() {
	    return this.getTypedRuleContext(ClassTailContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterClassExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitClassExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitClassExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ClassExpressionContext = ClassExpressionContext;

class MemberIndexExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	OpenBracket() {
	    return this.getToken(JavaScriptParser.OpenBracket, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseBracket() {
	    return this.getToken(JavaScriptParser.CloseBracket, 0);
	};

	QuestionMarkDot() {
	    return this.getToken(JavaScriptParser.QuestionMarkDot, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMemberIndexExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMemberIndexExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitMemberIndexExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.MemberIndexExpressionContext = MemberIndexExpressionContext;

class IdentifierExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterIdentifierExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitIdentifierExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitIdentifierExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.IdentifierExpressionContext = IdentifierExpressionContext;

class BitAndExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	BitAnd() {
	    return this.getToken(JavaScriptParser.BitAnd, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBitAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.BitAndExpressionContext = BitAndExpressionContext;

class BitOrExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	BitOr() {
	    return this.getToken(JavaScriptParser.BitOr, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBitOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.BitOrExpressionContext = BitOrExpressionContext;

class AssignmentOperatorExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAssignmentOperatorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAssignmentOperatorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAssignmentOperatorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.AssignmentOperatorExpressionContext = AssignmentOperatorExpressionContext;

class VoidExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Void() {
	    return this.getToken(JavaScriptParser.Void, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVoidExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVoidExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitVoidExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.VoidExpressionContext = VoidExpressionContext;

class CoalesceExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	NullCoalesce() {
	    return this.getToken(JavaScriptParser.NullCoalesce, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCoalesceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCoalesceExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitCoalesceExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.CoalesceExpressionContext = CoalesceExpressionContext;

class AssignableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_assignable;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	arrayLiteral() {
	    return this.getTypedRuleContext(ArrayLiteralContext,0);
	};

	objectLiteral() {
	    return this.getTypedRuleContext(ObjectLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAssignable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAssignable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAssignable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ObjectLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_objectLiteral;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	propertyAssignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyAssignmentContext);
	    } else {
	        return this.getTypedRuleContext(PropertyAssignmentContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterObjectLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitObjectLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitObjectLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnonymousFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_anonymousFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AnonymousFunctionDeclContext extends AnonymousFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Function_() {
	    return this.getToken(JavaScriptParser.Function_, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAnonymousFunctionDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAnonymousFunctionDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAnonymousFunctionDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.AnonymousFunctionDeclContext = AnonymousFunctionDeclContext;

class ArrowFunctionContext extends AnonymousFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	arrowFunctionParameters() {
	    return this.getTypedRuleContext(ArrowFunctionParametersContext,0);
	};

	ARROW() {
	    return this.getToken(JavaScriptParser.ARROW, 0);
	};

	arrowFunctionBody() {
	    return this.getTypedRuleContext(ArrowFunctionBodyContext,0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrowFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrowFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArrowFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ArrowFunctionContext = ArrowFunctionContext;

class ArrowFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arrowFunctionParameters;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrowFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrowFunctionParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArrowFunctionParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrowFunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arrowFunctionBody;
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrowFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrowFunctionBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArrowFunctionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_assignmentOperator;
    }

	MultiplyAssign() {
	    return this.getToken(JavaScriptParser.MultiplyAssign, 0);
	};

	DivideAssign() {
	    return this.getToken(JavaScriptParser.DivideAssign, 0);
	};

	ModulusAssign() {
	    return this.getToken(JavaScriptParser.ModulusAssign, 0);
	};

	PlusAssign() {
	    return this.getToken(JavaScriptParser.PlusAssign, 0);
	};

	MinusAssign() {
	    return this.getToken(JavaScriptParser.MinusAssign, 0);
	};

	LeftShiftArithmeticAssign() {
	    return this.getToken(JavaScriptParser.LeftShiftArithmeticAssign, 0);
	};

	RightShiftArithmeticAssign() {
	    return this.getToken(JavaScriptParser.RightShiftArithmeticAssign, 0);
	};

	RightShiftLogicalAssign() {
	    return this.getToken(JavaScriptParser.RightShiftLogicalAssign, 0);
	};

	BitAndAssign() {
	    return this.getToken(JavaScriptParser.BitAndAssign, 0);
	};

	BitXorAssign() {
	    return this.getToken(JavaScriptParser.BitXorAssign, 0);
	};

	BitOrAssign() {
	    return this.getToken(JavaScriptParser.BitOrAssign, 0);
	};

	PowerAssign() {
	    return this.getToken(JavaScriptParser.PowerAssign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAssignmentOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAssignmentOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_literal;
    }

	NullLiteral() {
	    return this.getToken(JavaScriptParser.NullLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(JavaScriptParser.BooleanLiteral, 0);
	};

	StringLiteral() {
	    return this.getToken(JavaScriptParser.StringLiteral, 0);
	};

	templateStringLiteral() {
	    return this.getTypedRuleContext(TemplateStringLiteralContext,0);
	};

	RegularExpressionLiteral() {
	    return this.getToken(JavaScriptParser.RegularExpressionLiteral, 0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	bigintLiteral() {
	    return this.getTypedRuleContext(BigintLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_templateStringLiteral;
    }

	BackTick = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.BackTick);
	    } else {
	        return this.getToken(JavaScriptParser.BackTick, i);
	    }
	};


	templateStringAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TemplateStringAtomContext);
	    } else {
	        return this.getTypedRuleContext(TemplateStringAtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTemplateStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTemplateStringLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitTemplateStringLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateStringAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_templateStringAtom;
    }

	TemplateStringAtom() {
	    return this.getToken(JavaScriptParser.TemplateStringAtom, 0);
	};

	TemplateStringStartExpression() {
	    return this.getToken(JavaScriptParser.TemplateStringStartExpression, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	TemplateCloseBrace() {
	    return this.getToken(JavaScriptParser.TemplateCloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTemplateStringAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTemplateStringAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitTemplateStringAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_numericLiteral;
    }

	DecimalLiteral() {
	    return this.getToken(JavaScriptParser.DecimalLiteral, 0);
	};

	HexIntegerLiteral() {
	    return this.getToken(JavaScriptParser.HexIntegerLiteral, 0);
	};

	OctalIntegerLiteral() {
	    return this.getToken(JavaScriptParser.OctalIntegerLiteral, 0);
	};

	OctalIntegerLiteral2() {
	    return this.getToken(JavaScriptParser.OctalIntegerLiteral2, 0);
	};

	BinaryIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BinaryIntegerLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitNumericLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitNumericLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BigintLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_bigintLiteral;
    }

	BigDecimalIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BigDecimalIntegerLiteral, 0);
	};

	BigHexIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BigHexIntegerLiteral, 0);
	};

	BigOctalIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BigOctalIntegerLiteral, 0);
	};

	BigBinaryIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BigBinaryIntegerLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBigintLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBigintLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBigintLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_getter;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterGetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitGetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitGetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_setter;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitSetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_identifierName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	reservedWord() {
	    return this.getTypedRuleContext(ReservedWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterIdentifierName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitIdentifierName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitIdentifierName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_identifier;
    }

	Identifier() {
	    return this.getToken(JavaScriptParser.Identifier, 0);
	};

	NonStrictLet() {
	    return this.getToken(JavaScriptParser.NonStrictLet, 0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	As() {
	    return this.getToken(JavaScriptParser.As, 0);
	};

	From() {
	    return this.getToken(JavaScriptParser.From, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_reservedWord;
    }

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	NullLiteral() {
	    return this.getToken(JavaScriptParser.NullLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(JavaScriptParser.BooleanLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterReservedWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitReservedWord(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitReservedWord(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_keyword;
    }

	Break() {
	    return this.getToken(JavaScriptParser.Break, 0);
	};

	Do() {
	    return this.getToken(JavaScriptParser.Do, 0);
	};

	Instanceof() {
	    return this.getToken(JavaScriptParser.Instanceof, 0);
	};

	Typeof() {
	    return this.getToken(JavaScriptParser.Typeof, 0);
	};

	Case() {
	    return this.getToken(JavaScriptParser.Case, 0);
	};

	Else() {
	    return this.getToken(JavaScriptParser.Else, 0);
	};

	New() {
	    return this.getToken(JavaScriptParser.New, 0);
	};

	Var() {
	    return this.getToken(JavaScriptParser.Var, 0);
	};

	Catch() {
	    return this.getToken(JavaScriptParser.Catch, 0);
	};

	Finally() {
	    return this.getToken(JavaScriptParser.Finally, 0);
	};

	Return() {
	    return this.getToken(JavaScriptParser.Return, 0);
	};

	Void() {
	    return this.getToken(JavaScriptParser.Void, 0);
	};

	Continue() {
	    return this.getToken(JavaScriptParser.Continue, 0);
	};

	For() {
	    return this.getToken(JavaScriptParser.For, 0);
	};

	Switch() {
	    return this.getToken(JavaScriptParser.Switch, 0);
	};

	While() {
	    return this.getToken(JavaScriptParser.While, 0);
	};

	Debugger() {
	    return this.getToken(JavaScriptParser.Debugger, 0);
	};

	Function_() {
	    return this.getToken(JavaScriptParser.Function_, 0);
	};

	This() {
	    return this.getToken(JavaScriptParser.This, 0);
	};

	With() {
	    return this.getToken(JavaScriptParser.With, 0);
	};

	Default() {
	    return this.getToken(JavaScriptParser.Default, 0);
	};

	If() {
	    return this.getToken(JavaScriptParser.If, 0);
	};

	Throw() {
	    return this.getToken(JavaScriptParser.Throw, 0);
	};

	Delete() {
	    return this.getToken(JavaScriptParser.Delete, 0);
	};

	In() {
	    return this.getToken(JavaScriptParser.In, 0);
	};

	Try() {
	    return this.getToken(JavaScriptParser.Try, 0);
	};

	Class() {
	    return this.getToken(JavaScriptParser.Class, 0);
	};

	Enum() {
	    return this.getToken(JavaScriptParser.Enum, 0);
	};

	Extends() {
	    return this.getToken(JavaScriptParser.Extends, 0);
	};

	Super() {
	    return this.getToken(JavaScriptParser.Super, 0);
	};

	Const() {
	    return this.getToken(JavaScriptParser.Const, 0);
	};

	Export() {
	    return this.getToken(JavaScriptParser.Export, 0);
	};

	Import() {
	    return this.getToken(JavaScriptParser.Import, 0);
	};

	Implements() {
	    return this.getToken(JavaScriptParser.Implements, 0);
	};

	let_() {
	    return this.getTypedRuleContext(Let_Context,0);
	};

	Private() {
	    return this.getToken(JavaScriptParser.Private, 0);
	};

	Public() {
	    return this.getToken(JavaScriptParser.Public, 0);
	};

	Interface() {
	    return this.getToken(JavaScriptParser.Interface, 0);
	};

	Package() {
	    return this.getToken(JavaScriptParser.Package, 0);
	};

	Protected() {
	    return this.getToken(JavaScriptParser.Protected, 0);
	};

	Static() {
	    return this.getToken(JavaScriptParser.Static, 0);
	};

	Yield() {
	    return this.getToken(JavaScriptParser.Yield, 0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	Await() {
	    return this.getToken(JavaScriptParser.Await, 0);
	};

	From() {
	    return this.getToken(JavaScriptParser.From, 0);
	};

	As() {
	    return this.getToken(JavaScriptParser.As, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitKeyword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Let_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_let_;
    }

	NonStrictLet() {
	    return this.getToken(JavaScriptParser.NonStrictLet, 0);
	};

	StrictLet() {
	    return this.getToken(JavaScriptParser.StrictLet, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLet_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLet_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLet_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EosContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_eos;
    }

	SemiColon() {
	    return this.getToken(JavaScriptParser.SemiColon, 0);
	};

	EOF() {
	    return this.getToken(JavaScriptParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterEos(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitEos(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitEos(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




JavaScriptParser.ProgramContext = ProgramContext; 
JavaScriptParser.SourceElementContext = SourceElementContext; 
JavaScriptParser.StatementContext = StatementContext; 
JavaScriptParser.BlockContext = BlockContext; 
JavaScriptParser.StatementListContext = StatementListContext; 
JavaScriptParser.ImportStatementContext = ImportStatementContext; 
JavaScriptParser.ImportFromBlockContext = ImportFromBlockContext; 
JavaScriptParser.ImportModuleItemsContext = ImportModuleItemsContext; 
JavaScriptParser.ImportAliasNameContext = ImportAliasNameContext; 
JavaScriptParser.ModuleExportNameContext = ModuleExportNameContext; 
JavaScriptParser.ImportedBindingContext = ImportedBindingContext; 
JavaScriptParser.ImportDefaultContext = ImportDefaultContext; 
JavaScriptParser.ImportNamespaceContext = ImportNamespaceContext; 
JavaScriptParser.ImportFromContext = ImportFromContext; 
JavaScriptParser.AliasNameContext = AliasNameContext; 
JavaScriptParser.ExportStatementContext = ExportStatementContext; 
JavaScriptParser.ExportFromBlockContext = ExportFromBlockContext; 
JavaScriptParser.ExportModuleItemsContext = ExportModuleItemsContext; 
JavaScriptParser.ExportAliasNameContext = ExportAliasNameContext; 
JavaScriptParser.DeclarationContext = DeclarationContext; 
JavaScriptParser.VariableStatementContext = VariableStatementContext; 
JavaScriptParser.VariableDeclarationListContext = VariableDeclarationListContext; 
JavaScriptParser.VariableDeclarationContext = VariableDeclarationContext; 
JavaScriptParser.EmptyStatement_Context = EmptyStatement_Context; 
JavaScriptParser.ExpressionStatementContext = ExpressionStatementContext; 
JavaScriptParser.IfStatementContext = IfStatementContext; 
JavaScriptParser.IterationStatementContext = IterationStatementContext; 
JavaScriptParser.VarModifierContext = VarModifierContext; 
JavaScriptParser.ContinueStatementContext = ContinueStatementContext; 
JavaScriptParser.BreakStatementContext = BreakStatementContext; 
JavaScriptParser.ReturnStatementContext = ReturnStatementContext; 
JavaScriptParser.YieldStatementContext = YieldStatementContext; 
JavaScriptParser.WithStatementContext = WithStatementContext; 
JavaScriptParser.SwitchStatementContext = SwitchStatementContext; 
JavaScriptParser.CaseBlockContext = CaseBlockContext; 
JavaScriptParser.CaseClausesContext = CaseClausesContext; 
JavaScriptParser.CaseClauseContext = CaseClauseContext; 
JavaScriptParser.DefaultClauseContext = DefaultClauseContext; 
JavaScriptParser.LabelledStatementContext = LabelledStatementContext; 
JavaScriptParser.ThrowStatementContext = ThrowStatementContext; 
JavaScriptParser.TryStatementContext = TryStatementContext; 
JavaScriptParser.CatchProductionContext = CatchProductionContext; 
JavaScriptParser.FinallyProductionContext = FinallyProductionContext; 
JavaScriptParser.DebuggerStatementContext = DebuggerStatementContext; 
JavaScriptParser.FunctionDeclarationContext = FunctionDeclarationContext; 
JavaScriptParser.ClassDeclarationContext = ClassDeclarationContext; 
JavaScriptParser.ClassTailContext = ClassTailContext; 
JavaScriptParser.ClassElementContext = ClassElementContext; 
JavaScriptParser.MethodDefinitionContext = MethodDefinitionContext; 
JavaScriptParser.FormalParameterListContext = FormalParameterListContext; 
JavaScriptParser.FormalParameterArgContext = FormalParameterArgContext; 
JavaScriptParser.LastFormalParameterArgContext = LastFormalParameterArgContext; 
JavaScriptParser.FunctionBodyContext = FunctionBodyContext; 
JavaScriptParser.SourceElementsContext = SourceElementsContext; 
JavaScriptParser.ArrayLiteralContext = ArrayLiteralContext; 
JavaScriptParser.ElementListContext = ElementListContext; 
JavaScriptParser.ArrayElementContext = ArrayElementContext; 
JavaScriptParser.PropertyAssignmentContext = PropertyAssignmentContext; 
JavaScriptParser.PropertyNameContext = PropertyNameContext; 
JavaScriptParser.ArgumentsContext = ArgumentsContext; 
JavaScriptParser.ArgumentContext = ArgumentContext; 
JavaScriptParser.ExpressionSequenceContext = ExpressionSequenceContext; 
JavaScriptParser.SingleExpressionContext = SingleExpressionContext; 
JavaScriptParser.AssignableContext = AssignableContext; 
JavaScriptParser.ObjectLiteralContext = ObjectLiteralContext; 
JavaScriptParser.AnonymousFunctionContext = AnonymousFunctionContext; 
JavaScriptParser.ArrowFunctionParametersContext = ArrowFunctionParametersContext; 
JavaScriptParser.ArrowFunctionBodyContext = ArrowFunctionBodyContext; 
JavaScriptParser.AssignmentOperatorContext = AssignmentOperatorContext; 
JavaScriptParser.LiteralContext = LiteralContext; 
JavaScriptParser.TemplateStringLiteralContext = TemplateStringLiteralContext; 
JavaScriptParser.TemplateStringAtomContext = TemplateStringAtomContext; 
JavaScriptParser.NumericLiteralContext = NumericLiteralContext; 
JavaScriptParser.BigintLiteralContext = BigintLiteralContext; 
JavaScriptParser.GetterContext = GetterContext; 
JavaScriptParser.SetterContext = SetterContext; 
JavaScriptParser.IdentifierNameContext = IdentifierNameContext; 
JavaScriptParser.IdentifierContext = IdentifierContext; 
JavaScriptParser.ReservedWordContext = ReservedWordContext; 
JavaScriptParser.KeywordContext = KeywordContext; 
JavaScriptParser.Let_Context = Let_Context; 
JavaScriptParser.EosContext = EosContext; 
